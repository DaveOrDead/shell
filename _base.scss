/* ============================================================================
   @BASE
   ========================================================================= */


/**
 * Here we provide very basic styling that most UI’s will need. These styles
 * are applied at the most global level being applied via element selectors,
 * except for “Headings” which are scoped to classes (see that section for the
 * info). Everything in Base needs to be easily overridden which is really
 * easy to do as everything in Base sits right at the bottom in terms of
 * specificity.
 *
 * ----------------------------------------------------------------------------
 *
 * CONTENTS:
 *
 * 1. Root element
 * 2. Links
 * 3. Horizontal rule
 * 4. Images
 * 5. Forms
 * 6. Paragraphs
 * 7. Headings
 * 8. Print
 */




/* 1. Root element
   ========================================================================= */

/**
 * 1. Set the global typography rules sourced from “Settings”.
 * 2. Fonts on OSX will look more consistent with other systems that do not
 *    render text using sub-pixel anti-aliasing.
 *    N.B. we recommend not to use this.
 */

html {
    background: $shell-base-root-element-background-color;
    color: $shell-g-color-text-base;
    font-family: $shell-g-font-family-base; // [1]
    font-size: $shell-g-font-size / 16 * 1em; // [1]
    font-weight: $shell-g-font-weight-normal; // [1]
    line-height: $shell-g-line-height-ratio; // [1]

    @if $shell-base-apply-osx-font-smoothing {
        -moz-osx-font-smoothing: grayscale; // [2]
        -webkit-font-smoothing: antialiased; // [2]
    }
}




/* 2. Links
   ========================================================================= */

a {
    color: $shell-g-color-link;
    text-decoration: $shell-base-link-text-decoration;

    @if $shell-base-apply-link-transition {
        transition: all $shell-base-link-transition-duration $shell-base-link-transition-timing-function;
    }

    &:hover,
    &:focus {
        color: $shell-g-color-link-hover;
        text-decoration: $shell-base-link-text-decoration-on-hover;
    }
}




/* 3. Horizontal rule
   ========================================================================= */

hr {
    border-top: $shell-base-hr-thickness $shell-base-hr-style $shell-base-hr-color;
    display: block;
    height: 1px;
    // Offset the border thickness to maintain a vertical rhythm
    margin-top: -$shell-base-hr-thickness;
}




/* 4. Images
   ========================================================================= */

/**
 * 1. Make responsive, i.e. keep images from scaling beyond the width of their
 *    parents.
 * 2. `[alt]` text is visually offset if images don’t load.
 */

img {
    max-width: 100%; // [1]
    height: auto; // [1]
    font-style: italic; // [2]
}


/**
 * Third-party widgets—like Google Maps—cannot have their images be responsive
 * as this breaks any images used within them therefore we remove that by
 * applying the two possible Google Map container selectors plus a generic
 * container selector to be used for other third-party widgets.
 *
 * N.B. it is okay to use `!important` here as we’re doing it preemptively
 * i.e. you know you will always want the rule it’s applied to to take
 * precedence.
 */

.remove-responsive-images img,
#map_canvas img,
.map_canvas img, {
    max-width: none !important;
}




/* 5. Forms
   ========================================================================= */

/**
 * Apply an optional `opacity` style for disabled and read-only states.
 *
 * N.B. if developing for iOS be aware of this bug:
 * “Safari Mobile for iOS applies a default style of `opacity: 0.4` to disabled
 * textual `<input>` elements. Other major browsers don’t currently share this
 * particular default style.”
 * —https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input#Browser_compatibility
 */

@if $shell-base-apply-style-to-disabled-and-readonly-states {
    :disabled,
    [readonly] {
        opacity: $shell-base-disabled-and-readonly-state-opacity-strength;
    }
}




/* 6. Paragraphs
   ========================================================================= */

/**
 * Apply an optional bottom margin to all paragraphs.
 */

@if $shell-base-apply-bottom-margin-to-paragraphs {
    p {
        margin-bottom: to-rem($shell-g-spacing-base);
    }
}




/* 7. Headings
   ========================================================================= */

/**
 * Here we scope our Base Heading styles to classes instead of the `hx` element
 * selector so our styles are not tied to the semantics of the heading element,
 * i.e. if you want a `h4` to look like a `h2` you can easily do this.
 *
 * N.B. spacing (`bottom-margin`) is handled via the “Spacing” helpers.
 */


/**
 * Neutralise all the heading elements in favour of applying styles via the
 * `.heading` class and its modifiers. We make all the heading elements use the
 * default typography styles and we may as well apply the heading colour.
 *
 * N.B. `margin` and `padding` are taken care of in “Normalise/Reset”.
 */


h1,
h2,
h3,
h4,
h5,
h6 {
    color: $shell-g-color-text-heading;
    font-size: to-rem($shell-g-font-size);
    font-weight: $shell-g-font-weight-normal;
    line-height: $shell-g-line-height-ratio;
}


/**
 * Base `.heading` styles.
 */

.heading {
    color: $shell-g-color-text-heading;
    font-family: $shell-g-font-family-headings;
    font-size: to-rem($shell-g-font-size-heading);
    font-weight: $shell-g-font-weight-heading;
}

/**
 * Modifiers: sizes.
 */

// Decrease
.heading--size-small {
    font-size: to-rem($shell-g-font-size-heading-small);
}

.heading--size-x-small {
    font-size: to-rem($shell-g-font-size-heading-x-small);
}

.heading--size-xx-small {
    font-size: to-rem($shell-g-font-size-heading-xx-small);
}

.heading--size-xxx-small {
    font-size: to-rem($shell-g-font-size-heading-xxx-small);
}

// Increase
.heading--size-large {
    font-size: to-rem($shell-g-font-size-heading-large);
}

.heading--size-x-large {
    font-size: to-rem($shell-g-font-size-heading-x-large);
}

.heading--size-xx-large {
    font-size: to-rem($shell-g-font-size-heading-xx-large);
}

.heading--size-xxx-large {
    font-size: to-rem($shell-g-font-size-heading-xxx-large);
}

/**
 * Modifiers: weights.
 *
 * N.B. one of these weights is redundant as it’s the Base weight but we don’t
 * know what that weight is so we have to include it.
 */

// Thin
.heading--weight-thin {
    font-weight: $shell-g-font-weight-thin;
}

// Extra light
.heading--weight-extra-light {
    font-weight: $shell-g-font-weight-extra-light;
}

// Light
.heading--weight-light {
    font-weight: $shell-g-font-weight-light;
}

// Medium
.heading--weight-medium {
    font-weight: $shell-g-font-weight-medium;
}

// Semi-bold
.heading--weight-semi-bold {
    font-weight: $shell-g-font-weight-semi-bold;
}

// Bold
.heading--weight-bold {
    font-weight: $shell-g-font-weight-bold;
}

// Extra bold
.heading--weight-extra-bold {
    font-weight: $shell-g-font-weight-extra-bold;
}

// Black
.heading--weight-black {
    font-weight: $shell-g-font-weight-black;
}




/* 8. Print
   ========================================================================= */

/**
 * N.B. it is okay to use `!important` here as we're doing it preemptively i.e.
 * you know you will always want the rule it's applied too to take precedence.
 */

@media print {

    /**
     * Apply print friendly styles to all the things.
     */

    *,
    *::before,
    *::after,
    *::first-child,
    *::first-line {
        background: transparent !important;
        box-shadow: none !important;
        color: $shell-g-color-black !important;
        text-shadow: none !important;
    }


    /**
     * Hide elements not really useful on a piece of paper.
     */

    nav,
    video,
    audio {
        display: none !important;
    }


    /**
     * Ensure all images are responsive.
     */

    img {
        height: auto !important;
        max-width: 100% !important;
    }


    /**
     * Make links always stand out.
     */

    a,
    a:visited {
        border-bottom: 0 !important;
        text-decoration: underline !important;
    }


    /**
     * Show the `[href]` and `[title]` attribute values of links and
     * abbreviations via their `::after` pseudo element.
     */

    a[href]::after {
        content: " (" attr(href) ")";
    }

    abbr[title]::after {
        content: " (" attr(title) ")";
    }

    // Don’t show links that are fragment identifiers, or use the
    // `javascript:` pseudo protocol
    a[href^="javascript:"]::after,
    a[href^="#"]::after {
        content: "";
    }


    /**
     * Make the header row repeated at the top of each printed page, see:
     * http://css-discuss.incutio.com/wiki/Printing_Tables
     */

    thead {
        display: table-header-group;
    }


    /**
     * Set page breaks, orphans and widows.
     */

    // Page breaks
    h2
    h3 {
        page-break-after: avoid;
    }

    tr,
    img,
    pre,
    blockquote {
        page-break-inside: avoid;
    }

    // Orphans and widows
    p,
    h2,
    h3 {
        orphans: 3;
        widows: 3;
    }
}

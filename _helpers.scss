/* ============================================================================
   @HELPERS
   ========================================================================= */


/**
 * To come…
 *
 * ----------------------------------------------------------------------------
 *
 * Helpers including any of the Helper mixins are namespaced with “h” followed
 * by one hyphen, like this:
 *
   h-
 *
 * The “h” stands for “helper”.
 *
 * See: https://git.campmon.com/Freshview/coding-guidelines/blob/master/css/README.md#the-namespaces
 *
 * ----------------------------------------------------------------------------
 *
 * CONTENTS:
 *
 * 1. Clear fix
 * 2. Text
 */




/* 1. Clear fix
   ========================================================================= */

/**
 * Make an element expand to contain floated children.
 */

/**
 * @access public
 *
 * @example
   .selector {
      […]
      @include h-clear-fix;
    }
 */

@mixin h-clear-fix {
    &::after {
        content: "" !important;
        display: table !important;
        clear: both !important;
    }
}

.h-clear-fix {
    @include h-clear-fix;
}




/* 2. Text
   ========================================================================= */

/**
 * Sizes.
 */

// Base
.h-text-size-base {
    font-size: to-rem($shell-g-font-size) !important;
}

// Smaller
.h-text-size-small {
    font-size: to-rem($shell-g-font-size-small) !important;
}

.h-text-size-x-small {
    font-size: to-rem($shell-g-font-size-x-small) !important;
}

.h-text-size-xx-small {
    font-size: to-rem($shell-g-font-size-xx-small) !important;
}

.h-text-size-xxx-small {
    font-size: to-rem($shell-g-font-size-xxx-small) !important;
}

// Larger
.h-text-size-large {
    font-size: to-rem($shell-g-font-size-large) !important;
}

.h-text-size-x-large {
    font-size: to-rem($shell-g-font-size-x-large) !important;
}

.h-text-size-xx-large {
    font-size: to-rem($shell-g-font-size-xx-large) !important;
}

.h-text-size-xxx-large {
    font-size: to-rem($shell-g-font-size-xxx-large) !important;
}


/**
 * Truncate using an ellipsis. This helper will only work on block container
 * elements so the default is set to `display: block;`, to override this
 * to be, say, `display: inline-block;` you have two options:
 *
 * 1. Use the “Inline” modifier class selector: `.h-text-truncate--inline`.
 * 2. Use the mixin assigning “inline-block” to the `$display` parameter:
 *    `@include h-text-truncate(inline-block);`.
 *
 * You can assign other `display` values when using the mixin but not sure if
 * that’ll ever be required outside of `display: block;` and
 * `display: inline-block;`?
 */

/**
 * @access private
 */

@mixin h-text-truncate-placeholder {
    overflow: hidden !important;
    text-overflow: ellipsis !important;
    white-space: nowrap !important;
}

/**
 * @access public
 *
 * @param {string} $display — The value of the `display` property
 *
 * @example
   .selector {
      […]
      @include h-text-truncate;
    }
 */

@mixin h-text-truncate($display: block) {
    @if $display == block {
        display: $display !important;
    } @else {
        display: $display !important;
    }
    @include h-text-truncate-placeholder;
}

.h-text-truncate {
    @include h-text-truncate();
}

/**
 * Modifier: inline.
 */

.h-text-truncate--inline {
    display: inline-block !important;
}


/**
 * Fonts on OS X will look more consistent with other systems that do not
 * render text using sub-pixel anti-aliasing.
 *
 * N.B. we recommend not to use this and this can be applied globally on the
 * `<html>` element in “Base” therefore it’s only applied here if that boolean
 * setting is set to “false”—which is the default.
 */

@if $shell-base-apply-osx-font-smoothing == false {
    .h-text-osx-font-smoothing {
        -moz-osx-font-smoothing: grayscale !important;
        -webkit-font-smoothing: antialiased !important;
    }
}

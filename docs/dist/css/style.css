@charset "UTF-8";
/* ============================================================================
   @SHELL DOCS STYLESHEET
   ========================================================================= */
/**
 * Styles for the Shell Docs site.
 *
 * ----------------------------------------------------------------------------
 *
 * CONTENTS:
 *
 * 1. Shell Docs settings
 * 2. Shell framework
 * 3. Shell Docs styles
 *
 * N.B. the above order of sections #1 and #2 must be maintained otherwise Sass
 * will not compile ಠ╭╮ಠ!
 */
/* 1. Shell Docs settings incl. any Shell setting overrides
   ========================================================================= */
/* ============================================================================
   @SETTINGS
   ========================================================================= */
/**
 * All global settings (Sass variables) for the Shell Docs and any Shell
 * framework setting overrides.
 *
 * Shell Docs settings can use any of the Shell framework settings, like so:
 *
   $g-color-code-block-background: $shell-g-color-white;
 *
 * ---------------------------------------------------------------------------
 *
 * All settings start with a global namespace: `$g` followed by one hyphen,
 * like this:
 *
   $g-;
 *
 * The “g” stands for “global”.
 *
 * ----------------------------------------------------------------------------
 *
 * CONTENTS:
 *
 * 1. Colours
 * 2. Typography
 * 3. Shell overrides
 */
/* 1. Colours
   ========================================================================= */
/* 2. Typography
   ========================================================================= */
/* 3. Shell overrides
   ========================================================================= */
/**
 * Global.
 */
/**
 * Local.
 */
/* 2. Shell framework
   ========================================================================= */
/**
 * The entire framework is imported however only use what you need, you will
 * however need: “Settings” and “Mixins/Functions” for Shell to work.
 */
/**
 * Settings.
 */
/* ============================================================================
   @SETTINGS
   ========================================================================= */
/**
 * All of Shell’s settings (Sass variables).
 *
 * The settings are broken into two categories:
 *
 * - “Global”.....settings for the entire framework.
 * - “Local”......settings for a particular partial.
 *
 * N.B. usually “Local” settings exist in their relevant partial but we combine
 * them for Shell to make them easier to override. It’s easier as you can
 * override all of the settings in the one place—typically in a
 * “_settings.scss” partial—compared to overriding “Local” settings above
 * their relevant partial within the master stylesheet, like so:
 *
   $shell-apply-osx-font-smoothing: true;
   $shell-apply-link-transition: false;
   @import "[framework/path]/base";

   $shell-grid-gutter: 24;
   @import "[framework/path]/grid";
 *
 * The above set up is more cumbersome to maintain due to “Local” settings
 * being dispersed throughout the master stylesheet plus the master stylesheet
 * should only contain Sass partial imports.
 *
 * Having all settings together in the same Sass partial makes life easier for
 * consumers of Shell.
 *
 * ----------------------------------------------------------------------------
 *
 * All settings start with a global namespace: `$shell` followed by one
 * hyphen, like this:
 *
   $shell-
 *
 * “Global” settings include a letter “g” to easily identify them, like so:
 *
   $shell-g-
 *
 * “Local” settings include the name of its section to easily identify them, so
 * settings for the “Base” and “Grid” sections would be formatted like this:
 *
   $shell-base-
   $shell-grid-
 *
 * The `$shell` namespace prevents your project settings and Shell’s settings
 * from clashing with each other, and allows you to easily see what is
 * coming from Shell and what isn’t.
 *
 * ----------------------------------------------------------------------------
 *
 * CONTENTS:
 *
 * 1. Colours (Global)
 * 2. Typography (Global)
 * 3. Spacing (Global)
 * 4. Breakpoints (Global)
 * 5. Percentage widths (Global)
 * 6. Z-Index system (Global)
 * 7. Other (Global)
 * 8. Base (Local)
 * 9. Container (Local)
 *
 * More to come…
 */
/* 1. Colours (Global)
   ========================================================================= */
/**
 * Black and white.
 *
 * N.B. non-overridable.
 */
/**
 * Text.
 */
/**
 * Links.
 */
/**
 * `[placeholder]` attribute in an input field.
 */
/* 2. Typography (Global)
   ========================================================================= */
/**
 * Base sizes.
 */
/**
 * Heading sizes.
 */
/**
 * Line height.
 */
/**
 * Line height ratio.
 *
 * N.B. non-overridable.
 */
/**
 * Families.
 */
/**
 * Weights.
 *
 * N.B. all the font weights other than `$shell-g-font-weight-normal` are there
 * to be used when you’re using Webfonts i.e. fonts brought in via the
 * `@font-face` declaration. It’s better to store each Webfont weights in
 * settings rather than trying to remember each of the numbers that the
 * weights correspond to, plus it ensures that your project’s typography is
 * applied consistency. You can use these settings for none Webfonts i.e.
 * system fonts but typically you’ll only need to apply one weight which is
 * “bold” and in that case using `font-weight: bold;` is fine.
 *
 * See: https://developer.mozilla.org/en/docs/Web/CSS/font-weight#Common_weight_name_mapping.
 */
/* 3. Spacing (Global)
   ========================================================================= */
/**
 * Base.
 */
/**
 * Decrease from base: fractions and “tiny” / “small”.
 */
/**
 * Increase from base: fractions and “large” / “huge”.
 */
/* 4. Breakpoints (Global)
   ========================================================================= */
/**
 * The breakdown of the breakpoints is based off this chart:
 * http://static.lukew.com/unified_device_design.png
 *
 * Here’s the thinking:
 *
 * - Palm..........smart-phones and feature phones—anything that can fit into
 *                 the palm of a hand.
 * - Lap...........typically tablets, notebooks and laptops—anything that is
 *                 portable that doesn't include phones.
 * - Lap small.....smaller tablets/notebooks and e-readers e.g. Kindle.
 * - Lap large.....larger tablets and laptops.
 * - Desk..........desktop computers, TVs, etc.—anything that isn’t portable.
 * - Desk large....larger desktop computer monitors, TVs, and who knows what
 *                 else?
 *
 * The breakpoints:
 *
 * - Palm: 0–640px
 * - Lap: 641px +
 * - Lap small: 768px +
 * - Lap large: 901px +
 * - Desk: 1200px +
 * - Desk large: 1366px +
 *
 * @credit
 * http://www.lukew.com/ff/entry.asp?1679
 */
/**
 * The setting used for the default breakpoint applied to the
 * `generate-at-breakpoints()` mixin which allows the application of certain
 * Shell features to be applied at any breakpoint.
 */
/* 5. Percentage widths (Global)
   ========================================================================= */
/**
 * N.B. all these settings are non-overridable.
 */
/**
 * Whole.
 */
/**
 * Half.
 */
/**
 * Thirds.
 */
/**
 * Quarters.
 */
/**
 * Fifths.
 */
/**
 * Sixths.
 */
/**
 * Sevenths.
 */
/**
 * Eighths.
 */
/**
 * Tenths.
 */
/**
 * Twelfths.
 */
/* 6. Z-Index system (Global)
   ========================================================================= */
/**
 * A nice system that uses Sass maps to keep your project `z-index`s
 * maintainable, sane, and free of those crazy `z-index: 99999;` occurrences!
 *
 * Be sure to read this to fully understand how the system works:
 * http://www.sitepoint.com/better-solution-managing-z-index-sass/
 *
 * Shell kicks it off by providing a standard stacking order that most projects
 * would require, you can then update the Sass map in your project “Settings”
 * partial, be sure to use nested maps to make this system aware of stacking
 * contexts as having a flat map will soon become a headache to maintain.
 *
 * Applying `z-index`s with this system is done like this:
 *
   .c-header {
     z-index: z("header");
   }
 *
 * And for nested stacking contexts (defined via a nested map):
 *
   .c-modal__close-button {
     z-index: z("modal-elements", "close-button");
   }
 *
 * N.B. as we’re using a Sass map (and nested maps) we need to use a Sass
 * function to make it easier to apply the map values and to be able to
 * retrieve nested map values. The function lives in “Mixins/Functions”.
 *
 * @credit
 * http://www.sitepoint.com/better-solution-managing-z-index-sass/
 */
/**
 * Starting from highest to lowest:
 *
   <body>
     <modal>
       <modal-close-button>
     <modal-underlay>
     <header>
     <main>
     <footer>
   </body>
 */
/* 7. Other (Global)
   ========================================================================= */
/**
 * Device pixel ratio used for the HiDPI mixins, see “Mixins/Functions”. We
 * generate the `dpi` and `dppx` units from this.
 *
 * N.B. non-overridable.
 */
/**
 * HTML textual `input`s.
 */
/* 8. Base (Local)
   ========================================================================= */
/**
 * Booleans.
 */
/**
 * Root element.
 */
/**
 * Links.
 */
/**
 * Horizontal rule.
 */
/**
 * Forms.
 */
/* 9. Container (Local)
   ========================================================================= */
/**
 * Booleans.
 */
/**
 * Widths.
 */
/**
 * Mixins/Functions.
 */
/* ============================================================================
   @MIXINS AND FUNCTIONS
   ========================================================================= */
/**
 * All of Shell’s mixins and functions.
 *
 * All mixins and functions use the following annotations from the Sass Docs
 * documentation system:
 *
 * @access
 * @example
 * @parameter
 * @require
 * @throw
 *
 * See: http://sassdoc.com/annotations/
 *
 * ----------------------------------------------------------------------------
 *
 * CONTENTS:
 *
 * 1. Shell-only mixins and functions
 * 2. HiDPI background images (Mixin)
 * 3. Convert pixels to `rem`s or `em`s (Function)
 */
/* 1. Shell-only mixins and functions
   ========================================================================= */
/**
 * Shell-only mixins and functions, not for Shell consumers although some can
 * be used if the need arises.
 */
/**
 * Remove the unit of a length.
 *
 * @access private
 *
 * @param {number} $number — Number to remove unit from
 *
 * @example
   strip-unit(24px)
 */
/* 2. HiDPI background images (Mixin)
   ========================================================================= */
/**
 * A mixin for easily applying HiDPI background images.
 *
 * We use a device pixel ratio (“dpr”) of “1.3” which captures almost all HiDPI
 * aware devices, see: https://gist.github.com/marcedwards/3446599.
 *
 * N.B. Autoprefixer will take care of generating the non-standard
 * `-webkit-device-pixel-ratio` for browsers/devices that need it, see:
 * http://caniuse.com/#feat=css-media-resolution.
 *
 * @access public
 *
 * @param {string} $img-url — The image url path
 * @param {number} $img-width [auto] — The image width in `px`
 * @param {number} $img-height [auto] — The image height in `px`
 *
 * @exception
 * $img-url must be within single or double quotes
 * $img-width and $img-height must be a number with a unit
 *
 * @example
   .selector {
      background: url("path/to/image/image.png") no-repeat;
      @include hidpi-bg-img("path/to/image/image.png", 100px, 45px);
    }

    .selector {
      background: url("path/to/image/image.png") no-repeat;
      @include hidpi-bg-img("path/to/image/image.png", 32px);
    }
 */
/* 3. Convert pixels to `rem`s or `em`s (Function)
   ========================================================================= */
/**
 * A simple function to convert pixels to `rem`s or `em`s.
 *
 * @access public
 *
 * @param {number} $value — The `px` amount to be converted
 * @param {number} $parent-value [$shell-g-font-size] — The `px` amount of the
 * parent (`em` only)
 *
 * @requires
 * function strip-unit()
 *
 * @exception
 * $value must be a number
 * $parent-value must be a number
 *
 * @example
   .selector {
     margin-left: to-em(8, 20);
   }

   .selector {
     padding: to-rem(8) 0;
   }
 */
/**
 * `em`.
 */
/**
 * `rem`.
 */
/**
 * Normalise/Reset.
 */
/* ============================================================================
   @NORMALISE AND RESET
   ========================================================================= */
/**
 * Let’s get all browsers rendering all elements more consistently and in line
 * with modern standards, and let’s nuke certain user-agent styles so that
 * everything is on an even playing field.
 *
 * ----------------------------------------------------------------------------
 *
 * @credit
 * https://necolas.github.io/normalize.css/
 * https://html5boilerplate.com/
 * https://suitcss.github.io/
 * https://github.com/twbs/bootstrap/blob/v4.0.0-alpha.2/
 *
 * ----------------------------------------------------------------------------
 *
 * CONTENTS:
 *
 * 1. Root element and global resets
 * 2. Block-level elements
 * 3. Inline elements
 * 4. Embedded, image, and multimedia, elements
 * 5. Form elements
 * 6. Table elements
 * 7. Interactions
 */
/* 1. Root element and global resets
   ========================================================================= */
/**
 * 1. Reset the `box-sizing` property to the more friendly `border-box` value.
 * 2. Set default font family to sans-serif.
 * 3. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  box-sizing: border-box;
  font-family: sans-serif;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
}

*,
*::before,
*::after {
  box-sizing: inherit;
}

/**
 * Remove all margins, paddings, and borders.
 *
 * N.B. do not include the following elements:
 * - `<input>`
 * - `<button>`
 * - `<textarea>`
 *
 * The complete list of HTML5 elements:
 * https://developer.mozilla.org/en/docs/Web/Guide/HTML/HTML5/HTML5_element_list
 */
a,
abbr,
acronym,
address,
applet,
article,
aside,
b,
blockquote,
body,
caption,
center,
cite,
code,
dd,
del,
details,
dfn,
dialog,
div,
dl,
dt,
em,
fieldset,
figcaption,
figure,
footer,
form,
h1,
h2,
h3,
h4,
h5,
h6,
header,
hgroup,
html,
i,
iframe,
img,
ins,
kbd,
label,
legend,
li,
main,
menu,
nav,
object,
ol,
p,
pre,
q,
s,
samp,
section,
small,
span,
strong,
sub,
summary,
sup,
table,
tbody,
td,
tfoot,
th,
thead,
time,
tr,
u,
ul,
var {
  margin: 0;
  padding: 0;
  border: 0;
}

/* 2. Block-level elements
   ========================================================================= */
/**
 * Correct `block` display not defined for `<details>` or `<summary>` in
 * IE 10/11 and Firefox.
 * Correct `block` display not defined for `<main>` in IE 11.
 */
details,
main,
summary {
  display: block;
}

/**
 * Address `[hidden]` styling not present in IE 10.
 * Hide the `<template>` element in IE 10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none;
}

/**
 * Apply the pointer cursor to the `<summary>` element.
 * Remove the arrow from the `<summary>` element in WebKit browsers, to allow
 * for custom styling.
 */
summary {
  cursor: pointer;
}

summary::-webkit-details-marker {
  display: none;
}

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto;
}

/**
 * Reset lists, this is in addition to removing `margin` and `padding`.
 */
ul,
ol {
  list-style-type: none;
}

/* 3. Inline elements
   ========================================================================= */
/**
 * Remove the grey background colour from active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0;
}

/**
 * 1. Address styling not present in IE 10/11, Safari, and Chrome.
 * 2. Apply the help cursor.
 */
abbr[title] {
  border-bottom: 1px dotted;
  cursor: help;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic;
}

/**
 * Apply faux underlines to inserted text via `border-bottom`.
 */
ins {
  border-bottom: 1px solid;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 100%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* 4. Embedded, image and multimedia, elements
   ========================================================================= */
/**
 * Remove the gap between media elements and the bottom of their containers.
 * See: https://github.com/h5bp/html5-boilerplate/issues/440.
 */
audio,
canvas,
iframe,
img,
svg,
video {
  vertical-align: middle;
}

/**
 * Prevent modern browsers from displaying `<audio>` without controls.
 */
audio:not([controls]) {
  display: none;
}

/**
 * Correct overflow not hidden in IE 10/11.
 */
svg:not(:root) {
  overflow: hidden;
}

/**
 * Set the default behaviour for touch-based browsing in IE 10 on devices
 * running Windows 8.
 */
canvas {
  -ms-touch-action: double-tap-zoom;
}

/* 5. Form elements
   ========================================================================= */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `<select>`s, unless a `border` property is set.
 */
/**
 * 1. Correct colour not being inherited.
 *    Known issue: affects colour of disabled elements.
 * 2. Correct font property not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  font: inherit;
  margin: 0;
}

/**
 * Correct `line-height` property not being inherited.
 */
button,
input,
legend,
optgroup,
select,
textarea {
  line-height: inherit;
}

/**
 * 1. Reset styles.
 * 2. Address `overflow` set to `hidden` in IE 10/11.
 */
button {
  background: transparent;
  border: 0;
  padding: 0;
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `<button>` and
 * `<select>`s. All other form control elements do not inherit `text-transform`
 * values.
 * Correct `<button>` style inheritance in Firefox, IE 10/11, and Opera.
 * Correct `<select>` style inheritance in Firefox.
 */
button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where [2] destroys native `<audio>`
 *    and `<video>` controls.
 * 2. Improve usability and consistency of cursor style between image-type
 *    `<input>` and others.
 * 3. Correct inability to style clickable `<input>` types in iOS.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  cursor: pointer;
  -webkit-appearance: button;
}

/**
 * Remove inner padding and border in Firefox 4+.
 *
 * N.B. this may not be needed any more? Let’s see how testing goes.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Reset `not-allowed` cursor for disabled elements (`<button>`, `<input>`,
 * `<textarea>`, `<optgroup>`, `<option>` and `<fieldset>`) and disable
 * pointer events.
 */
:disabled {
  cursor: not-allowed;
  pointer-events: none;
}

/**
 * iOS “clickable elements” fix for `[role="button"]`.
 *
 * Fixes “clickability” issue (and more generally, the firing of events such
 * as focus as well) for traditionally non-focusable elements with
 * `[role="button"]`, see:
 * https://developer.mozilla.org/en-US/docs/Web/Events/click#Safari_Mobile
 */
[role="button"] {
  cursor: pointer;
}

/**
 * Remove rounded corners that iOS applies to all `<input>` buttons and certain
 * browsers e.g. Chrome, apply rounded corners to `<select>`s.
 */
input[type="submit"],
input[type="button"],
input[type="image"],
input[type="reset"],
select {
  border-radius: 0;
}

/**
 * Fix for IE and old versions of some other browsers not wrapping text within
 * a `<legend>`.
 *
 * 1. Enable line-wrapping in IE8+.
 * 2. Enable line-wrapping in old versions of some other browsers.
 *
 * N.B. this may not be needed any more? Let’s see how testing goes, we might
 * need this instead: https://github.com/twbs/bootstrap/blob/v4.0.0-alpha.2/scss/_reboot.scss#L316-L318
 */
legend {
  display: table;
  white-space: normal;
}

/**
 * It’s recommended that you don’t attempt to style these elements.
 * Firefox’s implementation doesn’t respect `box-sizing`, `padding`, or
 * `width`.
 *
 * 1. Address box sizing set to `content-box` in IE 10.
 * 2. Remove excess padding in IE 10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  padding: 0;
}

/**
 * Fix the cursor style for Chrome’s increment/decrement buttons. For certain
 * `font-size` values of the `<input>`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * Remove rounded corners from iOS search inputs.
 */
input[type="search"] {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `<textfield>` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Indicate that `<label>` will shift focus to the associated `<input>`
 * element.
 */
label {
  cursor: pointer;
}

/**
 * 1. Make sure `<textarea>`s takes on height automatically.
 * 2. Remove default vertical scrollbar in IE 10/11.
 * 3. Disable `<textarea>`s from being resized horizontally.
 */
textarea {
  height: auto;
  overflow: auto;
  resize: vertical;
}

/**
 * Chrome and Firefox set a `min-width: min-content;` on `<fieldset>`s, so we
 * reset that to ensure it behaves more like a standard block element, see:
 * https://github.com/twbs/bootstrap/issues/12359.
 */
fieldset {
  min-width: 0;
}

/**
 * Don’t inherit the `font-weight` (applied by a rule above).
 *
 * N.B. the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold;
}

/**
 * Normalise vertical alignment of `<progress>` in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline;
}

/**
 * Remove the top inner shadow from iOS inputs.
 *
 * N.B. we isolate this to iOS devices via user-agent sniffing then appending
 * an `ios` class to the `<html>` element.
 *
 * @credit
 * https://davidwalsh.name/input-shadows-ipad
 */
.ios input[type="text"],
.ios input[type="search"],
.ios input[type="tel"],
.ios input[type="url"],
.ios input[type="email"],
.ios input[type="password"],
.ios input[type="month"],
.ios input[type="week"],
.ios input[type="time"],
.ios input[type="date"],
.ios input[type="datetime"],
.ios input[type="datetime-local"],
.ios input[type="number"],
.ios textarea {
  -webkit-appearance: caret;
}

/**
 * Remove the clear field button (an “X” icon) and the reveal password button
 * (an “eye” icon) that is generated by IE 10+ for textual inputs.
 *
 * @credit
 * http://stackoverflow.com/a/21869433/1116204
 */
::-ms-clear,
::-ms-reveal {
  display: none;
}

/**
 * Unstyle the caret on `<select>`s in IE 10+.
 */
::-ms-expand {
  background-color: transparent;
  border: 0;
}

/* 6. Table elements
   ========================================================================= */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

/* 7. Interactions
   ========================================================================= */
/**
 * Suppress the focus outline on links that cannot be accessed via a keyboard.
 * This prevents an unwanted focus outline from appearing around elements that
 * might still respond to pointer events.
 *
 * N.B. it is okay to use `!important` here as we’re doing it preemptively
 * i.e. you know you will always want the rule it’s applied too to take
 * precedence.
 */
[tabindex="-1"]:focus {
  outline: none !important;
}

/**
 * Avoid 300ms click delay on touch devices that support the `touch-action` CSS
 * property.
 *
 * In particular, unlike most other browsers, IE 11+Edge on Windows 10 on touch
 * devices and IE Mobile 10-11 DON’T remove the click delay when
 * `<meta name="viewport" content="width=device-width">` is present.
 * However, they DO support removing the click delay via
 * `touch-action: manipulation`.
 *
 * See:
 * - http://caniuse.com/#feat=css-touch-action
 * - http://patrickhlauke.github.io/touch/tests/results/#suppressing-300ms-delay
 * - https://adactio.com/journal/10019
 */
a,
area,
button,
input,
label,
select,
summary,
textarea,
[tabindex]:not([tabindex="-1"]) {
  -ms-touch-action: manipulation;
      touch-action: manipulation;
}

/**
 * Base.
 */
/* ============================================================================
   @BASE
   ========================================================================= */
/**
 * Here we provide very basic styling that most UI’s will need. These styles
 * are applied at the most global level being applied via element selectors,
 * except for “Headings” which are scoped to classes (see that section for the
 * info). Everything in Base needs to be easily overridden which is really
 * easy to do as everything in Base sits right at the bottom in terms of
 * specificity.
 *
 * ----------------------------------------------------------------------------
 *
 * CONTENTS:
 *
 * 1. Root element
 * 2. Links
 * 3. Horizontal rule
 * 4. Images
 * 5. Forms
 * 6. Paragraphs
 * 7. Headings
 * 8. Print
 */
/* 1. Root element
   ========================================================================= */
/**
 * 1. Set the global typography rules sourced from “Settings”.
 * 2. Fonts on OS X will look more consistent with other systems that do not
 *    render text using sub-pixel anti-aliasing.
 *    N.B. we recommend not to use this.
 */
html {
  background: #fff;
  color: #333;
  font-family: sans-serif;
  font-size: 1.125em;
  font-weight: 400;
  line-height: 1.444;
}

/* 2. Links
   ========================================================================= */
a {
  color: #19a9e5;
  text-decoration: underline;
  transition: color 0.15s linear;
}

a:hover, a:focus {
  color: #1176a0;
  text-decoration: none;
}

/* 3. Horizontal rule
   ========================================================================= */
hr {
  border-top: 1px solid #333;
  display: block;
  height: 1px;
}

/* 4. Images
   ========================================================================= */
/**
 * 1. Make responsive, i.e. keep images from scaling beyond the width of their
 *    parents.
 * 2. `[alt]` text is visually offset if images don’t load.
 */
img {
  max-width: 100%;
  height: auto;
  font-style: italic;
}

/**
 * Third-party widgets—like Google Maps—cannot have their images be responsive
 * as this breaks any images used within them therefore we remove that by
 * applying the two possible Google Map container selectors plus a generic
 * container selector to be used for other third-party widgets.
 *
 * N.B. it is okay to use `!important` here as we’re doing it preemptively
 * i.e. you know you will always want the rule it’s applied to to take
 * precedence.
 */
.remove-responsive-images img,
#map_canvas img,
.map_canvas img {
  max-width: none !important;
}

/* 5. Forms
   ========================================================================= */
/**
 * Apply an optional `opacity` style for disabled and read-only states.
 *
 * N.B. if developing for iOS be aware of this bug:
 * “Safari Mobile for iOS applies a default style of `opacity: 0.4` to disabled
 * textual `<input>` elements. Other major browsers don’t currently share this
 * particular default style.”
 * —https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input#Browser_compatibility
 */
:disabled,
[readonly] {
  opacity: 0.6;
}

/* 6. Paragraphs
   ========================================================================= */
/**
 * Apply an optional bottom margin to all paragraphs.
 */
/* 7. Headings
   ========================================================================= */
/**
 * Here we scope our Base Heading styles to classes instead of the `hx` element
 * selector so our styles are not tied to the semantics of the heading element,
 * i.e. if you want a `h4` to look like a `h2` you can easily do this.
 *
 * N.B. spacing (`bottom-margin`) is handled via the “Spacing” helpers.
 */
/**
 * Neutralise all the heading elements in favour of applying styles via the
 * `.heading` class and its modifiers. We make all the heading elements use the
 * default typography styles and we may as well apply the heading colour.
 *
 * N.B. `margin` and `padding` are taken care of in “Normalise/Reset”.
 */
h1,
h2,
h3,
h4,
h5,
h6 {
  color: #333;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.444;
}

/**
 * Base `.heading` styles.
 */
.heading {
  color: #333;
  font-family: "HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif;
  font-size: 3.222rem;
  font-weight: 200;
}

/**
 * Modifiers: sizes.
 */
.heading--size-small {
  font-size: 2.333rem;
}

.heading--size-x-small {
  font-size: 3rem;
}

.heading--size-xx-small {
  font-size: 2.889rem;
}

.heading--size-xxx-small {
  font-size: 0.944rem;
}

.heading--size-large {
  font-size: 3.333rem;
}

.heading--size-x-large {
  font-size: 3.444rem;
}

.heading--size-xx-large {
  font-size: 3.556rem;
}

.heading--size-xxx-large {
  font-size: 3.667rem;
}

/**
 * Modifiers: weights.
 *
 * N.B. one of these weights is redundant as it’s the Base weight but we don’t
 * know what that weight is so we have to include it.
 */
.heading--weight-thin {
  font-weight: 100;
}

.heading--weight-extra-light {
  font-weight: 200;
}

.heading--weight-light {
  font-weight: 300;
}

.heading--weight-medium {
  font-weight: 500;
}

.heading--weight-semi-bold {
  font-weight: 600;
}

.heading--weight-bold {
  font-weight: 700;
}

.heading--weight-extra-bold {
  font-weight: 800;
}

.heading--weight-black {
  font-weight: 900;
}

/* 8. Print
   ========================================================================= */
/**
 * N.B. it is okay to use `!important` here as we're doing it preemptively i.e.
 * you know you will always want the rule it's applied too to take precedence.
 */
@media print {
  /**
         * Apply print friendly styles to all the things.
         */
  *,
  *::before,
  *::after,
  *::first-child,
  *::first-line {
    background: transparent !important;
    box-shadow: none !important;
    color: #000 !important;
    text-shadow: none !important;
  }
  /**
         * Hide elements not really useful on a piece of paper.
         */
  nav,
  video,
  audio {
    display: none !important;
  }
  /**
         * Ensure all images are responsive.
         */
  img {
    height: auto !important;
    max-width: 100% !important;
  }
  /**
         * Make links always stand out.
         */
  a,
  a:visited {
    border-bottom: 0 !important;
    text-decoration: underline !important;
  }
  /**
         * Show the `[href]` and `[title]` attribute values of links and
         * abbreviations via their `::after` pseudo element.
         */
  a[href]::after {
    content: " (" attr(href) ")";
  }
  abbr[title]::after {
    content: " (" attr(title) ")";
  }
  a[href^="javascript:"]::after,
  a[href^="#"]::after {
    content: "";
  }
  /**
         * Make the header row repeated at the top of each printed page, see:
         * http://css-discuss.incutio.com/wiki/Printing_Tables
         */
  thead {
    display: table-header-group;
  }
  /**
         * Set page breaks, orphans and widows.
         */
  h2
h3 {
    page-break-after: avoid;
  }
  tr,
  img,
  pre,
  blockquote {
    page-break-inside: avoid;
  }
  p,
  h2,
  h3 {
    orphans: 3;
    widows: 3;
  }
}

/**
 * Container.
 */
/* ============================================================================
   @CONTAINER
   ========================================================================= */
/**
 * Pretty much every UI will need to be constrained by a container or a
 * series of them (modifiers of the base container), e.g. a wider container,
 * a narrower container, etc. Repeating the CSS of these crucial structural
 * UI elements like `width` and `max-width` does not make for a robust,
 * scalable, consistent, and maintainable UI. So we abstract that CSS out here.
 *
 * The most common usage for this container(s) is for constructing a master
 * layout of a site/app, for example, if our master layout needed a full-bleed
 * (100% of the viewport) header and footer with a nested container to be
 * capped off at a certain width, and the main content area needing the same
 * treatment as the nested header and footer, we would mark it up like this:
 *
   <header class="l-header" role="banner">
     <div class="l-container">
       […]
     </div>
   </header>
   <main class="l-main l-container" role="main">
     […]
   </main>
   <footer class="l-footer" role="contentinfo">
     <div class="l-container">
       […]
     </div>
   </footer>
 *
 * In the main content area we may have an entire section: “Blog” requiring a
 * much narrower container for nice readable line lengths, we could achieve
 * this by creating a sub layout nested in the `<main>` container of the
 * above master layout and using one of the “Size” modifiers provided by
 * Shell, like so:
 *
   <div class="l-container l-container--tiny">
     […]
   </div>
 *
 * Container(s) can be used anywhere it makes sense to do so including within
 * components.
 *
 * All containers are responsive ready meaning they are a fluid width (using
 * the `%` unit) up until it hits its maximum width. And are center aligned by
 * default.
 *
 * Other styles cannot be applied to an element using a container. Container is
 * a “Layout Module” therefore the “Single Responsibility Principle” and the
 * “Open/close Principle” strictly applies. So this would be invalid:
 *
   <div class="l-container  c-card">
     […]
   </div>
 *
 * Here we have wrongly applied a “Component” (`c-card`) to the same element as
 * a “Layout Module”, we’ve mixed concerns, this can result in this part of
 * the UI being prone to breakages. The valid way to approach this would be:
 *
   <div class="l-container">
     <div class="c-card">
       […]
     </div>
   </div>
 *
 * ----------------------------------------------------------------------------
 *
 * Container is namespaced with “l” followed by one hyphen, like this:
 *
   l-
 *
 * The “l” stands for “layout” as Container is a “Layout Module”.
 *
 * See: https://git.campmon.com/Freshview/coding-guidelines/blob/master/css/README.md#the-namespaces
 */
.l-container {
  max-width: 38.889rem;
  min-width: 17.778rem;
  width: 90%;
}

/**
 * Wider and narrower container modifiers that use our set size names:
 *
 * - Huge
 * - Large
 * - Small
 * - Tiny
 */
.l-container--huge {
  max-width: 133.333rem;
}

.l-container--large {
  max-width: 111.111rem;
}

.l-container--small {
  max-width: 55.556rem;
}

.l-container--tiny {
  max-width: 35.556rem;
}

/**
 * Helpers.
 */
/* ============================================================================
   @HELPERS
   ========================================================================= */
/**
 * The purpose of Helpers is to provide extremely common style treatments
 * and UI patterns, some good examples are:
 *
 * - Hide an element visually but have it available for screen readers
 * - Truncate a line of text using an ellipsis
 * - Applying white space outside of Components
 *
 * Rather than repeating the CSS for these common style treatments and UI
 * patterns over and over and also the cognitive load of having to remember
 * their CSS declarations we instead abstract them into nicely reusable
 * classes and mixins.
 *
 * Helpers all follow the single responsibility and open/closed principles
 * meaning they do one thing and one thing only and are never open to
 * extension i.e. you cannot modify or add to them in any way. If you need to
 * modify any of Shell’s Helpers then you should simply not use them. Read more
 * about these principles and how they apply to CSS here:
 *
 * - http://csswizardry.com/2012/04/the-single-responsibility-principle-applied-to-css/
 * - http://csswizardry.com/2012/06/the-open-closed-principle-applied-to-css/
 *
 * Implementation
 *
 * Helpers are available as classes and sometimes as mixins, here we explain
 * how to implement the two different types. The class versions come with the
 * `!important` keyword, this is because they always need to win in terms of
 * CSS specificity as they should always just work. For the mixin versions
 * this is optional as the mixin versions are typically being applied from
 * within Components therefore do not require the specificity boost.
 *
 * Applying Helpers via their *class* implementation would only be done in two
 * scenarios:
 *
 * - **Outside of Components and Layout Templates:** this’ll be rare as most
 *   of your UI should be componentised or encapsulated in a Layout Template,
 *   for example, a site header or footer. An example though, might be that
 *   you have a paragraph element (`<p>`) sitting between two Components in a
 *   view that needs to be center aligned, so you apply one of the “Text”
 *   Helper classes: `.h-text-align-center`, like so:
 *   `<p class="h-text-align-center">`. However, this could be argued that
 *   this paragraph element should become a Component. The main exception of
 *   avoiding Helpers outside of Components and Layout Templates is the
 *   “Spacing” Helpers as we don’t want to bake in outside (`margin`) spacing
 *   to Components as this makes them contextual to surrounding UI.
 *
 * - **Inside of Components and Layout Templates:** although quite rare there
 *   are certain scenarios were you would want to be applying a Helper
 *   directly in the markup of a Component or Layout Template as opposed to
 *   applying it via the mixin implementation. However, this typically only
 *   ever applies to multi-line declaration Helpers, applying a single-line
 *   declaration Helper, for example:
 *   ```html
 *   .h-text-size-base {
 *     font-size: to-rem($shell-g-font-size) !important;
 *   }
 *   ```
 *   Wouldn’t be correct as you would simply write that single-line declaration
 *   directly into your Component or Layout Template CSS, and this is why
 *   single-line declaration Helpers do not come with a mixin version. An
 *   example of applying a multi-line declaration Helper directly in the
 *   markup of a Component or Layout Template would be when you’re having to
 *   create a class to apply a fairly common Helper. For example, you’re
 *   inside a “Drop Down Menu” Component needing to add a piece of text to the
 *   drop down menu trigger button that is only for screen reader users—using
 *   the “Hide visually” Helper. The correct way to achieve this would be:
 *   ```html
 *   <button type="button" class="c-drop-down-menu__trigger">
 *     My account
 *     <span class="h-hide-visually">Open the menu with the enter key and
 *     close it with the escape key; use the up and down arrow keys to
 *     navigate.</span>
 *   </button>
 *   ```
 *   Not:
 *   ```html
 *   <button type="button" class="c-drop-down-menu__trigger">
 *     My account
 *     <span class="c-drop-down-menu__trigger-assistive-text">Open the menu
 *     with the enter key and close it with the escape key; use the up and
 *     down arrow keys to navigate.</span>
 *   </button>
 *   ```
 *   ```css
 *   .c-drop-down-menu__trigger-assistive-text {
 *     @include h-hide-visually;
 *   }
 *   ```
 *   Knowing when to do this isn’t always clear and it is very case dependant.
 *
 * Applying Helpers via their *mixin* implementation would only be done in one
 * scenario:
 *
 * - **Inside of Components and Layout Templates:** any multi-line declaration
 *   Helpers should be applied via their mixin, this is to keep all the styles
 *   related to a Component or Layout Template nicely contained. For example,
 *   you may need to truncate a line of text in a site header Layout Template
 *   that is part of a main nav link item—using the “Text truncate” Helper.
 *   The correct way to achieve this would be:
 *   ```html
 *   <a href="some/url" class="l-header__nav-item">List &amp; Subscribers</a>
 *   ```
 *   ```css
 *   .l-header__nav-item {
 *     […]
 *     @include h-text-truncate;
 *   }
 *   ```
 *   Not:
 *   ```html
 *   <a href="some/url" class="l-header__nav-item  h-text-truncate">List &amp;
 *   Subscribers</a>
 *   ```
 *
 * All the mixins use the following annotations from the Sass Docs
 * documentation system:
 *
 * @access
 * @example
 * @parameter
 * @require
 * @throw
 *
 * See: http://sassdoc.com/annotations/
 *
 * ----------------------------------------------------------------------------
 *
 * N.B. it is important not to overuse certain Helpers, the exceptions are the
 * “Spacing” Helpers and the “Hide visually” and “Text truncate” Helpers.
 * Overuse can indicate that your UI is not componentised enough, which can
 * lead to a number of problems.
 *
 * ----------------------------------------------------------------------------
 *
 * Helpers including any of the Helper mixins are namespaced with “h” followed
 * by one hyphen, like this:
 *
   h-
 *
 * The “h” stands for “helper”.
 *
 * See: https://git.campmon.com/Freshview/coding-guidelines/blob/master/css/README.md#the-namespaces
 *
 * ----------------------------------------------------------------------------
 *
 * CONTENTS:
 *
 * 1. Clear fix
 * 2. Text
 * 3. Hide
 * 4. Spacing
 * 5. Horizontal and vertical alignment
 * 6. Intrinsic ratio
 */
/* 1. Clear fix
   ========================================================================= */
/**
 * Make an element expand to contain floated children.
 */
/**
 * @access public
 *
 * @param {boolean} $apply-important-keyword [false] — Whether to apply the
 * `!important` keyword
 *
 * @example
   .selector {
      […]
      @include h-clear-fix();
    }
 */
.h-clear-fix::after {
  clear: both !important;
  content: "" !important;
  display: table !important;
}

/* 2. Text
   ========================================================================= */
/**
 * Sizes.
 */
.h-text-size-base {
  font-size: 1rem !important;
}

.h-text-size-small {
  font-size: 0.944rem !important;
}

.h-text-size-x-small {
  font-size: 0.889rem !important;
}

.h-text-size-xx-small {
  font-size: 0.833rem !important;
}

.h-text-size-xxx-small {
  font-size: 0.778rem !important;
}

.h-text-size-large {
  font-size: 1.056rem !important;
}

.h-text-size-x-large {
  font-size: 1.111rem !important;
}

.h-text-size-xx-large {
  font-size: 1.167rem !important;
}

.h-text-size-xxx-large {
  font-size: 1.222rem !important;
}

/**
 * Alignments.
 */
.h-text-align-center {
  text-align: center !important;
}

.h-text-align-left {
  text-align: left !important;
}

.h-text-align-right {
  text-align: right !important;
}

/**
 * Truncate using an ellipsis. This Helper will only work on block container
 * elements so the default is set to `display: block;`, to override this
 * to be, say, `display: inline-block;` you have two options:
 *
 * 1. Use the “Inline” modifier class selector: `.h-text-truncate--inline`.
 * 2. Use the mixin assigning “inline-block” to the `$display` parameter:
 *    `@include h-text-truncate(inline-block);`.
 *
 * You can assign other `display` values when using the mixin but not sure if
 * that’ll ever be required outside of `display: block;` and
 * `display: inline-block;`?
 */
/**
 * @access public
 *
 * @param {boolean} $apply-important-keyword [false] — Whether to apply the
 * `!important` keyword
 * @param {string} $display [block] — The value of the `display` property
 *
 * @example
   .selector {
      […]
      @include h-text-truncate(false, inline-block);
    }
 */
.h-text-truncate {
  display: block !important;
  overflow: hidden !important;
  text-overflow: ellipsis !important;
  white-space: nowrap !important;
}

/**
 * Modifier: inline.
 */
.h-text-truncate--inline {
  display: inline-block !important;
}

/**
 * Fonts on OS X will look more consistent with other systems that do not
 * render text using sub-pixel anti-aliasing.
 *
 * N.B. we recommend not to use this. And this can be applied globally on the
 * `<html>` element in “Base” therefore it’s only applied here if that boolean
 * setting is set to “false”—which is the default.
 */
/**
 * @access public
 *
 * @param {boolean} $apply-important-keyword [false] — Whether to apply the
 * `!important` keyword
 *
 * @example
   .selector {
      […]
      @include h-text-osx-font-smoothing();
    }
 */
.h-text-osx-font-smoothing {
  -moz-osx-font-smoothing: grayscale !important;
  -webkit-font-smoothing: antialiased !important;
}

/* 3. Hide
   ========================================================================= */
/**
 * Hide elements from both screen readers and the document flow.
 */
.h-hide {
  display: none !important;
}

/**
 * Hide elements only visually but have it available for screen readers.
 */
/**
 * @access public
 *
 * @param {boolean} $apply-important-keyword [false] — Whether to apply the
 * `!important` keyword
 *
 * @example
   .selector {
      […]
      @include h-hide-visually();
    }
 */
.h-hide-visually {
  border: 0 !important;
  clip: rect(0 0 0 0) !important;
  height: 1px !important;
  margin: -1px  !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  width: 1px !important;
}

/**
 * Hide elements for JavaScript users and non-JavaScript users, this is
 * necessary when building accessible and progressively enhanced UI’s.
 *
 * These classes are applied to the `<html>` element depending whether
 * JavaScript is on or off:
 *
 * - `no-js` = JavaScript is off
 * - `js`    = JavaScript is on
 *
 * The `no-js` class is to be hard-coded to the `<html>` element in your master
 * layout to be replaced with the `js` class using JavaScript.
 *
 * N.B. these single-line declaration Helpers would typically always be applied
 * directly in the markup of your Components and Layout Templates.
 */
.no-js .h-hide-if-js-off {
  display: none !important;
}

.js .h-hide-if-js-on {
  display: none !important;
}

/**
 * Hide and show elements for print media.
 */
.h-show-for-print,
.h-show-for-print-inline,
.h-show-for-print-inline-block {
  display: none !important;
}

@media print {
  .h-hide-for-print {
    display: none !important;
  }
  .h-show-for-print {
    display: block !important;
  }
  .h-show-for-print-inline {
    display: inline !important;
  }
  .h-show-for-print-inline-block {
    display: inline-block !important;
  }
}

/* 4. Spacing
   ========================================================================= */
/**
 * Any spacing outside of a Component is handled by one of these “Spacing”
 * Helpers unless handled by the “Grid”, and ALL spacing is downward facing
 * hence only `margin-bottom` being used.
 */
.h-spacing-base {
  margin-bottom: 1.444rem !important;
}

.h-spacing-tiny {
  margin-bottom: 0.361rem !important;
}

.h-spacing-small {
  margin-bottom: 0.722rem !important;
}

.h-spacing-large {
  margin-bottom: 2.889rem !important;
}

.h-spacing-huge {
  margin-bottom: 5.778rem !important;
}

/* 5. Horizontal and vertical alignment
   ========================================================================= */
/**
 * Flexbox version, must go on the parent of the element that needs the
 * alignment.
 */
/**
 * @access public
 *
 * @param {boolean} $apply-important-keyword [false] — Whether to apply the
 * `!important` keyword
 *
 * @example
   .selector {
      […]
      @include h-align-horizontally-and-vertically();
    }
 */
.h-align-horizontally-and-vertically {
  -ms-flex-align: center !important;
      align-items: center !important;
  display: -ms-flexbox !important;
  display: flex !important;
  -ms-flex-pack: center !important;
      justify-content: center !important;
}

/**
 * Position and transform version, must go on the element that needs the
 * alignment and the elements parent must have `position: relative;`.
 */
/**
 * @access public
 *
 * @param {boolean} $apply-important-keyword [false] — Whether to apply the
 * `!important` keyword
 *
 * @example
   .selector {
      […]
      @include h-align-horizontally-and-vertically-alt();
    }
 */
.h-align-horizontally-and-vertically-parent {
  position: relative !important;
}

.h-align-horizontally-and-vertically-alt {
  left: 50% !important;
  position: absolute !important;
  top: 50% !important;
  transform: translate(-50%, -50%) !important;
}

/* 6. Intrinsic ratio
   ========================================================================= */
/**
 * A container that retains the aspect ratio of its content when that content
 * needs to adapt to the width of varying viewports. The content would
 * typically be embedded elements, like:
 *
 * `<video>`
 * `<iframe>`
 *
 * @credit
 * https://github.com/suitcss/components-flex-embed/blob/master/lib/flex-embed.css
 */
/**
 * The container, the default ratio is “16:9”.
 */
/**
 * @access public
 *
 * @param {boolean} $apply-important-keyword [false] — Whether to apply the
 * `!important` keyword
 * @param {list} $ratio [16 9] - The ratio of the content e.g. `3 1`, `4 3`.
 *
 * @exception
 * $ratio must be a list
 *
 * @example
   .selector {
      […]
      @include h-intrinsic-ratio-container(false, 3 1);
    }
 */
.h-intrinsic-ratio {
  display: block !important;
  height: 0 !important;
  overflow: hidden !important;
  padding-bottom: 56.25% !important;
  position: relative !important;
}

/**
 * Modifiers: different ratios, we can’t use the mixin for this as it’ll
 * generate too much CSS as we’ll be generating every property for each
 * modifier when we only need to set the `padding-bottom` property—so we just
 * override the default ratio of “16:9”.
 */
.h-intrinsic-ratio--3-by-1 {
  padding-bottom: 33.333% !important;
}

.h-intrinsic-ratio--2-by-1 {
  padding-bottom: 50% !important;
}

.h-intrinsic-ratio--4-by-3 {
  padding-bottom: 75% !important;
}

/**
 * The content.
 */
/**
 * @access public
 *
 * @param {boolean} $apply-important-keyword [false] — Whether to apply the
 * `!important` keyword
 *
 * @example
   .selector {
      […]
      @include h-intrinsic-ratio-content();
    }
 */
.h-intrinsic-ratio__content {
  height: 100% !important;
  left: 0 !important;
  position: absolute !important;
  top: 0 !important;
  width: 100% !important;
}

/* 3. Shell Docs styles
   ========================================================================= */
/**
 * Base.
 */
/* ============================================================================
   @BASE
   ========================================================================= */
/**
 * Here we provide very basic styling that most UI’s will need. These styles
 * are applied at the most global level being applied via element selectors.
 * Everything in Base needs to be easily overridden which is really easy to do
 * as everything in Base sits right at the bottom in terms of specificity.
 *
 * CONTENTS:
 *
 * 1. Code element
 */
/* 1. Code
   ========================================================================= */
code {
  font-family: Consolas, "Andale Mono", "Bitstream Vera Sans Mono", "Courier New", Courier, monospace;
}

/* 2. Headings
   ========================================================================= */
/**
 * Settings.
 */
/**
 * Styles for the nested anchor element rendered as a link icon.
 */
.heading {
  position: relative;
}

/**
 * The anchor.
 */
.heading__anchor {
  bottom: 4px;
  left: 0;
  line-height: 0;
  position: absolute;
  transition: none;
  top: 4px;
  background: aqua;
  width: 40px;
  /**
     * The link icon.
     */
}

.heading__anchor svg {
  fill: #504f4f;
  height: 100%;
  opacity: 0.25;
  transition: opacity 0.15s;
  width: 100%;
}

.heading__anchor:hover svg,
.heading__anchor:focus svg {
  opacity: 1;
}

/**
 * Layout/Template.
 */
/* ============================================================================
   @LAYOUT -> TEMPLATE -> HEADER
   ========================================================================= */
/**
 * The site header which is in the form of a left sidebar at wider viewports.
 */
/**
 * Settings.
 */
.l-header {
  background-color: #37393b;
  color: #fff;
  height: 100vh;
  padding: 2.167rem 2.167rem;
  position: fixed;
  width: 15.889rem;
}

/**
 * The SVG logo and the wrapping link.
 */
.l-header__logo-link {
  display: block;
  margin-bottom: 2.889rem;
}

.l-header__logo {
  fill: #fff;
}

/**
 * Main navigation.
 */
/**
 * Items.
 */
.l-header__nav__item {
  margin-bottom: 0.361rem;
}

/**
 * Links.
 */
.l-header__nav__link {
  border-bottom: 1px solid transparent;
  color: #fff;
  display: inline-block;
  text-decoration: none;
  transition: all 0.10s ease-out;
}

.l-header__nav__link:hover, .l-header__nav__link:focus, .l-header__nav__link.is-active {
  border-bottom-color: #b3b3b3;
  color: #b3b3b3;
}

/* ============================================================================
   @LAYOUT -> TEMPLATE -> MAIN
   ========================================================================= */
/**
 * The main content area of the site.
 */
/**
 * Settings.
 */
.l-main {
  margin-left: 15.889rem;
  padding-bottom: 2.167rem;
  padding-left: 4.333rem;
  padding-top: 2.167rem;
}

/**
 * Components.
 */
/* ============================================================================
   @COMPONENTS -> BULLETED LIST
   ========================================================================= */
/**
 * A simple component that applies styles for a bulleted list.
 */
/**
 * Settings.
 */
.c-bulleted-list {
  list-style: disc;
  list-style-position: outside;
}

/* ============================================================================
   @COMPONENTS -> VIEW MASTHEAD
   ========================================================================= */
/**
 * The masthead that sits at the top of each view (page), by default it
 * contains the view heading and an introduction.
 *
 * @markup
 * /partials/view-masthead.hbs
 */
/**
 * Settings.
 */
.c-view-masthead {
  margin-bottom: 4.333rem;
}

/**
 * The heading.
 */
.c-view-masthead__heading {
  margin-bottom: 1.444rem;
}

/**
 * The introduction.
 */
.c-view-masthead__intro {
  font-size: 1.111rem;
}

.c-view-masthead__intro > p {
  margin-bottom: 1.444rem;
}

/* ============================================================================
   @COMPONENTS -> DEMO
   ========================================================================= */
/**
 * A component that encapsulates a demo for something coming from Shell,
 * typically includes:
 *
 * - A heading
 * - An intro
 * - Configurable items
 * - An example
 * - The examples code
 * - View source code link
 *
 * @example
 * /partials/demo.hbs
 */
/**
 * Settings.
 */
.c-demo {
  background-color: #f9f9f9;
  font-size: 0.944rem;
  padding: 2.167rem;
  padding-left: 4.333rem;
  padding-right: 4.333rem;
  margin-bottom: 4.333rem;
  margin-left: -4.333rem;
}

/**
 * Apply shared spacing.
 *
 * TODO: move this out of the component and replace with spacing helpers.
 */
.c-demo__spacing {
  margin-bottom: 1.444rem;
}

.c-demo__spacing-large {
  margin-bottom: 2.167rem;
}

/**
 * Intro.
 */
.c-demo__intro {
  margin-bottom: 2.167rem;
}

/**
 * Configurable items.
 */
.c-demo__config-items em {
  color: #504f4f;
  font-size: 0.889rem;
}

/**
 * Example.
 */
/**
 * Modifier: apply extra styling to the example markup, this is needed when
 * we need additional markup like paragraphs that isn’t the actual example
 * markup.
 */
.c-demo__example--extra-styling > p {
  color: #504f4f;
  font-family: "HelveticaNeue-Light", "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif;
  font-size: 0.889rem;
}

/**
 * View source code link.
 */
.c-demo__view-source-code {
  display: inline-block;
  padding-left: 0.722rem;
  padding-top: 0.722rem;
  text-decoration: none;
}

.has-no-example .c-demo__view-source-code {
  padding: 0;
}

/**
 * The link text.
 */
.c-demo__view-source-code-text {
  vertical-align: middle;
}

/**
 * The GitHub SVG icon.
 */
.c-demo__view-source-code-icon {
  fill: #19a9e5;
  height: 26px;
  transition: fill 0.15s linear;
  width: 26px;
}

.c-demo__view-source-code:hover .c-demo__view-source-code-icon,
.c-demo__view-source-code:focus .c-demo__view-source-code-icon {
  fill: #1176a0;
}

/* ============================================================================
   @COMPONENTS -> INLINE CODE
   ========================================================================= */
/**
 * A component for inline code occurrences.
 *
 * @example
   <code class="c-inline-code">[textnode]</code>
 */
.c-inline-code {
  color: #000080;
  display: inline-block;
  padding-left: 0.361rem;
  padding-right: 0.361rem;
}

/**
 * Vendor.
 */
/**
 * GitHub style syntax highlighting by Vasily Polovnyov (vast@whiteants.net).
 *
 * N.B. modified it by adding an attribute selector to the `<code>` element to
 * keep it encapsulated + changed the padding on this element. Also applied our
 * four space indentation.
 */
/**
 * Here we have to set the background of the `<pre>` element using parent
 * elements as the JS Assemble uses for syntax highlighting does not provide a
 * selector on `<pre>` element only the child `<code>` element.
 */
.c-demo__code > pre {
  background-color: #fff;
  border: 1px solid #efefef;
  display: block;
  padding: 0.722rem;
}

code[class*="language-"] {
  color: #333;
}

code[class*="language-"] .comment,
code[class*="language-"] .template_comment,
code[class*="language-"] .diff .header,
code[class*="language-"] .javadoc {
  color: #998;
  font-style: italic;
}

code[class*="language-"] .keyword,
code[class*="language-"] .css .rule .keyword,
code[class*="language-"] .winutils,
code[class*="language-"] .javascript .title,
code[class*="language-"] .nginx .title,
code[class*="language-"] .subst,
code[class*="language-"] .request,
code[class*="language-"] .status {
  color: #333;
  font-weight: bold;
}

code[class*="language-"] .number,
code[class*="language-"] .hexcolor,
code[class*="language-"] .ruby .constant {
  color: #099;
}

code[class*="language-"] .string,
code[class*="language-"] .tag .value,
code[class*="language-"] .phpdoc,
code[class*="language-"] .tex .formula {
  color: #960f4a;
}

code[class*="language-"] .title,
code[class*="language-"] .id,
code[class*="language-"] .coffeescript .params,
code[class*="language-"] .scss .preprocessor {
  color: #900;
  font-weight: bold;
}

code[class*="language-"] .javascript .title,
code[class*="language-"] .lisp .title,
code[class*="language-"] .clojure .title,
code[class*="language-"] .subst {
  font-weight: normal;
}

code[class*="language-"] .class .title,
code[class*="language-"] .haskell .type,
code[class*="language-"] .vhdl .literal,
code[class*="language-"] .tex .command {
  color: #458;
  font-weight: bold;
}

code[class*="language-"] .tag,
code[class*="language-"] .tag .title,
code[class*="language-"] .rules .property,
code[class*="language-"] .django .tag .keyword {
  color: #000080;
  font-weight: normal;
}

code[class*="language-"] .attribute,
code[class*="language-"] .variable,
code[class*="language-"] .lisp .body {
  color: #008080;
}

code[class*="language-"] .regexp {
  color: #009926;
}

code[class*="language-"] .class {
  color: #458;
  font-weight: bold;
}

code[class*="language-"] .symbol,
code[class*="language-"] .ruby .symbol .string,
code[class*="language-"] .lisp .keyword,
code[class*="language-"] .tex .special,
code[class*="language-"] .prompt {
  color: #990073;
}

code[class*="language-"] .built_in,
code[class*="language-"] .lisp .title,
code[class*="language-"] .clojure .built_in {
  color: #0086b3;
}

code[class*="language-"] .preprocessor,
code[class*="language-"] .pi,
code[class*="language-"] .doctype,
code[class*="language-"] .shebang,
code[class*="language-"] .cdata {
  color: #999;
  font-weight: bold;
}

code[class*="language-"] .deletion {
  background: #ffdddd;
}

code[class*="language-"] .addition {
  background: #ddffdd;
}

code[class*="language-"] .diff .change {
  background: #0086b3;
}

code[class*="language-"] .chunk {
  color: #aaaaaa;
}
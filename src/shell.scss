@charset "UTF-8";

/**
 * Shell CSS library by Campaign Monitor.
 * http://shellcss.io
 * Licensed under MIT ().
 */


/**
 * Settings.
 */

/* ============================================================================
   SETTINGS
   ========================================================================= */


/**
 * All of Shell's settings (Sass variables).
 *
 * The settings are broken into two categories:
 *
 * - "Global".....settings for the entire library.
 * - "Local"......settings for a particular partial.
 *
 * N.B. usually "Local" settings exist in their relevant partial but we combine
 * them for Shell to make them easier to override. It's easier as you can
 * override all of the settings in the one place—typically in a
 * "_settings.scss" partial—compared to overriding "Local" settings above
 * their relevant partial within the master stylesheet, like so:
 *
   $shell-apply-osx-font-smoothing: true;
   $shell-apply-link-transition: false;
   @import "[library/path]/base";

   $shell-grid-gutter: 24;
   @import "[library/path]/grid";
 *
 * The above set up is more cumbersome to maintain due to "Local" settings
 * being dispersed throughout the master stylesheet plus the master stylesheet
 * should only contain Sass partial imports.
 *
 * Having all settings together in the same Sass partial makes life easier for
 * consumers of Shell.
 *
 * ----------------------------------------------------------------------------
 *
 * All settings start with a global namespace: `$shell` followed by one
 * hyphen, like this:
 *
   $shell-
 *
 * "Global" settings include a letter "g" to easily identify them, like so:
 *
   $shell-g-
 *
 * "Local" settings include the name of its section to easily identify them, so
 * settings for the "Base" and "Grid" sections would be formatted like this:
 *
   $shell-base-
   $shell-grid-
 *
 * The `$shell` namespace prevents your project settings and Shell's settings
 * from clashing with each other, and allows you to easily see what is
 * coming from Shell and what isn't.
 *
 * ----------------------------------------------------------------------------
 *
 * CONTENTS:
 *
 * 1.  Base number (Global)
 * 2.  Colours (Global)
 * 3.  Typography (Global)
 * 4.  Spacing (Global)
 * 5.  Cosmetics (Global)
 * 6.  Breakpoints (Global)
 * 7.  Z-Index system (Global)
 * 8.  HiDPI units (Global)
 * 9.  HTML textual `input`s (Global)
 * 10. Base (Local)
 * 11. Container (Local)
 * 12. Grid (Local)
 * 13. Helpers (Local)
 */




/* 1. Base number (Global)
   ========================================================================= */

/**
 * The baseline number from which everything else is derived.
 */

$shell-g-base-number: 16 !default;




/* 2. Colours (Global)
   ========================================================================= */

/**
 * Black and white.
 */

$shell-g-color-white: #fff !default;

$shell-g-color-black: #000 !default;


/**
 * Base text.
 */

$shell-g-color-text: #434d5d !default;


/**
 * Links.
 */

$shell-g-color-link: #19a9e5 !default;

$shell-g-color-link-hover: $shell-g-color-link !default;




/* 3. Typography (Global)
   ========================================================================= */

/**
 * The scale based on `$shell-g-base-number` being 16:
 *
 * Decrease: 14, 13, 12
 * Increase: 18, 24, 28, 32, 40, 48, 56, 72
 */

$shell-g-font-size: $shell-g-base-number !default;

// Decrease
$shell-g-font-size-small: $shell-g-font-size - 2 !default;

$shell-g-font-size-x-small: $shell-g-font-size - 3 !default;

$shell-g-font-size-2x-small: $shell-g-font-size - 4 !default;

// Increase
$shell-g-font-size-large: $shell-g-font-size + 2 !default;

$shell-g-font-size-x-large: ceil($shell-g-font-size / 2 * 3) !default;

$shell-g-font-size-2x-large: ceil($shell-g-font-size / 2 * 3.5) !default;

$shell-g-font-size-3x-large: ceil($shell-g-font-size / 2 * 4) !default;

$shell-g-font-size-4x-large: ceil($shell-g-font-size / 2 * 5) !default;

$shell-g-font-size-5x-large: ceil($shell-g-font-size / 2 * 6) !default;

$shell-g-font-size-6x-large: ceil($shell-g-font-size / 2 * 7) !default;

$shell-g-font-size-7x-large: ceil($shell-g-font-size / 2 * 9) !default;


/**
 * Line height.
 */

$shell-g-line-height: 1.5 !default;


/**
 * Families.
 */

// Base
$shell-g-font-family: 'Helvetica Neue', sans-serif !default;

// Mono-space
$shell-g-font-family-monospace: monospace, monospace !default;


/**
 * Weights.
 */

$shell-g-font-weight-normal: 400 !default;

$shell-g-font-weight-light: 300 !default;

$shell-g-font-weight-bold: 700 !default;




/* 4. Spacing (Global)
   ========================================================================= */

/**
 * The scale based on `$shell-g-base-number` being 16:
 *
 * Decrease: 12, 8, 4
 * Increase: 24, 32, 40, 48, 56, 72, 96
 */

$shell-g-spacing: $shell-g-base-number !default;

// Decrease
$shell-g-spacing-small: floor($shell-g-spacing - 4) !default;

$shell-g-spacing-x-small: floor($shell-g-spacing / 2) !default;

$shell-g-spacing-2x-small: floor($shell-g-spacing / 4) !default;

// Increase
$shell-g-spacing-large: ceil($shell-g-spacing / 2 * 3) !default;

$shell-g-spacing-x-large: ceil($shell-g-spacing / 2 * 4) !default;

$shell-g-spacing-2x-large: ceil($shell-g-spacing / 2 * 5) !default;

$shell-g-spacing-3x-large: ceil($shell-g-spacing / 2 * 6) !default;

$shell-g-spacing-4x-large: ceil($shell-g-spacing / 2 * 7) !default;

$shell-g-spacing-5x-large: ceil($shell-g-spacing / 2 * 9) !default;

$shell-g-spacing-6x-large: ceil($shell-g-spacing / 2 * 12) !default;




/* 5. Cosmetics (Global)
   ========================================================================= */

$shell-g-border-radius: 3px;




/* 6. Breakpoints (Global)
   ========================================================================= */

/**
 * The breakdown of the breakpoints is based off this chart:
 * http://static.lukew.com/unified_device_design.png
 *
 * Here's the thinking:
 *
 * - Palm..........smart-phones and feature phones—anything that can fit into
 *                 the palm of a hand.
 * - Lap...........typically tablets, notebooks and laptops—anything that is
 *                 portable that doesn't include phones.
 * - Lap small.....smaller tablets/notebooks and e-readers e.g. Kindle.
 * - Lap large.....larger tablets and laptops.
 * - Desk..........desktop computers, TVs, etc.—anything that isn't portable.
 * - Desk large....larger desktop computer monitors, TVs, and who knows what
 *                 else?
 *
 * The breakpoints:
 *
 * - Palm: 0–640px
 * - Lap: 641px +
 * - Lap small: 768px +
 * - Lap large: 901px +
 * - Desk: 1200px +
 * - Desk large: 1366px +
 *
 * @credit
 * http://www.lukew.com/ff/entry.asp?1679
 */


/**
 * All the breakpoints divided by the default user-agent font-size setting
 * that is non-overridable by Shell's base font size setting:
 * `$shell-g-font-size`. We do this division as all viewport width and height
 * media queries are to be applied with the `em` unit. See:
 * http://blog.cloudfour.com/the-ems-have-it-proportional-media-queries-ftw/.
 *
 * N.B. if you wish to override any of the breakpoints then don't forget to
 * apply this calculation:
 *
    ([breakpoint-value] / 16) * 1em
 *
 * N.B. as we're using a Sass map we need to use a Sass function to make it
 * easier to apply the map keys, the function lives in
 * "Mixins/Functions -> Retrieve from maps".
 */

$shell-g-breakpoints: (

  // Palm
  "palm": (640 / 16) * 1em,

  // Lap
  "lap": (641 / 16) * 1em,
  "lap-small": (768 / 16) * 1em,
  "lap-large": (901 / 16) * 1em,

  // Desk
  "desk": (1200 / 16) * 1em,
  "desk-large": (1366 / 16) * 1em

) !default;


/**
 * The setting used for the default breakpoint applied to the
 * "Mixins/Functions -> Apply at breakpoints" mixin.
 */

$shell-g-global-breakpoints: (lap) !default;




/* 7. Z-Index system (Global)
   ========================================================================= */

/**
 * A nice system that uses Sass maps to keep your project `z-index`s
 * maintainable, sane, and free of those crazy `z-index: 99999;` occurrences!
 *
 * Be sure to read this to fully understand how the system works:
 * http://www.sitepoint.com/better-solution-managing-z-index-sass/
 *
 * Shell kicks it off by providing a standard stacking order that most projects
 * would require, you can then update the Sass map in your project "Settings"
 * partial, be sure to use nested maps to make this system aware of stacking
 * contexts as having a flat map will soon become a headache to maintain.
 *
 * Applying `z-index`s with this system is done like this:
 *
    .c-header {
        z-index: z(header);
    }
 *
 * And for nested stacking contexts (defined via a nested map):
 *
    .c-dialog__close-button {
        z-index: z(dialog-elements, close-button);
    }
 *
 * N.B. as we're using a Sass map (and nested maps) we need to use a Sass
 * function to make it easier to apply the map keys and to be able to
 * retrieve nested map keys. The function lives in
 * "Mixins/Functions -> Retrieve from maps".
 *
 * @credit
 * http://www.sitepoint.com/better-solution-managing-z-index-sass/
 */


/**
 * Starting from highest to lowest:
 *
    <body>
        <dialog>
            <dialog-close-button>
        <dialog-underlay>
        <header>
        <main>
        <footer>
    </body>
 */

$shell-g-z-layers: (
    "dialog-elements": (
        "close-button": 1
    ),
    "dialog": 5,
    "dialog-underlay": 4,
    "header": 3,
    "main": 2,
    "footer": 1,
    "underneath": -1
) !default;




/* 8. HiDPI units (Global)
   ========================================================================= */

/**
 * HiDPI units, currently being used in:
 * "Mixins/Functions -> HiDPI background images".
 *
 * N.B. non-over-ridable.
 */

$shell-g-hidpi-dpr: 1.3;

$shell-g-hidpi-dpi: ($shell-g-hidpi-dpr * 96) * 1dpi;

$shell-g-hidpi-dppx: 1.3 * 1dppx;




/* 9. HTML textual `input`s (Global)
   ========================================================================= */

$shell-g-textual-inputs: 'input[type="text"],
                          input[type="search"],
                          input[type="tel"],
                          input[type="url"],
                          input[type="email"],
                          input[type="password"],
                          input[type="month"],
                          input[type="week"],
                          input[type="time"],
                          input[type="date"],
                          input[type="datetime"],
                          input[type="datetime-local"],
                          input[type="number"]' !default;




/* 10. Base (Local)
   ========================================================================= */

/**
 * Booleans.
 */

$shell-base-apply-style-to-disabled-and-readonly-states: true !default;

$shell-base-apply-bottom-margin-to-paragraphs: false !default;


/**
 * Root element.
 */

$shell-base-root-element-background-color: $shell-g-color-white !default;


/**
 * Links.
 */

$shell-base-link-text-decoration: underline !default;

$shell-base-link-text-decoration-on-hover: none !default;


/**
 * Horizontal rule.
 */

$shell-base-hr-thickness: 1px !default;

$shell-base-hr-style: solid !default;

$shell-base-hr-color: $shell-g-color-text !default;


/**
 * Forms.
 */

$shell-base-disabled-and-readonly-state-opacity-strength: 0.6 !default;

$shell-base-target-ios-selector: '.target-ios' !default;




/* 11. Container (Local)
   ========================================================================= */

/**
 * Booleans.
 */

$shell-container-apply-center-alignment: true !default;


/**
 * Widths.
 */

$shell-container-maximum-width: $shell-g-base-number * 100 !default;

$shell-container-minimum-width: 320 !default;

// Size modifiers
$shell-container-maximum-width-x-large: $shell-g-base-number * 150 !default;

$shell-container-maximum-width-large: $shell-g-base-number * 125 !default;

$shell-container-maximum-width-small: $shell-g-base-number * 62.5 !default;

$shell-container-maximum-width-x-small: $shell-g-base-number * 47 !default;


/**
 * Gutter size.
 */

$shell-container-gutter: $shell-g-spacing-3x-large !default;




/* 12. Grid (Local)
   ========================================================================= */

/**
 * Grid column widths.
 */

$shell-grid-1-col-width: calc(100% / 12) !default;

$shell-grid-2-col-width: calc((100% / 12) * 2) !default;

$shell-grid-3-col-width: 25% !default;

$shell-grid-4-col-width: calc((100% / 12) * 4) !default;

$shell-grid-5-col-width: calc((100% / 12) * 5) !default;

$shell-grid-6-col-width: 50% !default;

$shell-grid-7-col-width: calc((100% / 12) * 7) !default;

$shell-grid-8-col-width: calc((100% / 12) * 8) !default;

$shell-grid-9-col-width: 75% !default;

$shell-grid-10-col-width: calc((100% / 12) * 10) !default;

$shell-grid-11-col-width: calc((100% / 12) * 11) !default;

$shell-grid-12-col-width: 100% !default;


/**
 * For all grid item widths turn on the ability to apply breakpoints via
 * boolean settings then define the breakpoints, see: "Mixins/Functions ->
 * Apply at breakpoints" to understand how this works.
 */

// 1 col
$shell-grid-apply-1-col-width-at-breakpoints: false !default;

$shell-grid-define-1-col-width-breakpoints: $shell-g-global-breakpoints !default;

// 2 col
$shell-grid-apply-2-col-width-at-breakpoints: false !default;

$shell-grid-define-2-col-width-breakpoints: $shell-g-global-breakpoints !default;

// 3 col
$shell-grid-apply-3-col-width-at-breakpoints: false !default;

$shell-grid-define-3-col-width-breakpoints: $shell-g-global-breakpoints !default;

// 4 col
$shell-grid-apply-4-col-width-at-breakpoints: false !default;

$shell-grid-define-4-col-width-breakpoints: $shell-g-global-breakpoints !default;

// 5 col
$shell-grid-apply-5-col-width-at-breakpoints: false !default;

$shell-grid-define-5-col-width-breakpoints: $shell-g-global-breakpoints !default;

// 6 col
$shell-grid-apply-6-col-width-at-breakpoints: false !default;

$shell-grid-define-6-col-width-breakpoints: $shell-g-global-breakpoints !default;

// 7 col
$shell-grid-apply-7-col-width-at-breakpoints: false !default;

$shell-grid-define-7-col-width-breakpoints: $shell-g-global-breakpoints !default;

// 8 col
$shell-grid-apply-8-col-width-at-breakpoints: false !default;

$shell-grid-define-8-col-width-breakpoints: $shell-g-global-breakpoints !default;

// 9 col
$shell-grid-apply-9-col-width-at-breakpoints: false !default;

$shell-grid-define-9-col-width-breakpoints: $shell-g-global-breakpoints !default;

// 10 col
$shell-grid-apply-10-col-width-at-breakpoints: false !default;

$shell-grid-define-10-col-width-breakpoints: $shell-g-global-breakpoints !default;

// 11 col
$shell-grid-apply-11-col-width-at-breakpoints: false !default;

$shell-grid-define-11-col-width-breakpoints: $shell-g-global-breakpoints !default;




/* 13. Helpers (Local)
   ========================================================================= */

/**
 * For certain "Helpers" turn on the ability to apply breakpoints via boolean
 * settings then define the breakpoints, see: "Mixins/Functions ->
 * Apply at breakpoints" to understand how this works.
 */


/**
 * Text sizes.
 */

/**
 * Base.
 */

$shell-helper-apply-text-size-at-breakpoints: false !default;

$shell-helper-define-text-size-breakpoints: $shell-g-global-breakpoints !default;

/**
 * Decrease from base.
 */

// Small
$shell-helper-apply-text-size-small-at-breakpoints: false !default;

$shell-helper-define-text-size-small-breakpoints: $shell-g-global-breakpoints !default;

// X-Small
$shell-helper-apply-text-size-x-small-at-breakpoints: false !default;

$shell-helper-define-text-size-x-small-breakpoints: $shell-g-global-breakpoints !default;

// 2X-Small
$shell-helper-apply-text-size-2x-small-at-breakpoints: false !default;

$shell-helper-define-text-size-2x-small-breakpoints: $shell-g-global-breakpoints !default;

/**
 * Increase from base.
 */

// Large
$shell-helper-apply-text-size-large-at-breakpoints: false !default;

$shell-helper-define-text-size-large-breakpoints: $shell-g-global-breakpoints !default;

// X-Large
$shell-helper-apply-text-size-x-large-at-breakpoints: false !default;

$shell-helper-define-text-size-x-large-breakpoints: $shell-g-global-breakpoints !default;

// 2X-Large
$shell-helper-apply-text-size-2x-large-at-breakpoints: false !default;

$shell-helper-define-text-size-2x-large-breakpoints: $shell-g-global-breakpoints !default;

// 3X-Large
$shell-helper-apply-text-size-3x-large-at-breakpoints: false !default;

$shell-helper-define-text-size-3x-large-breakpoints: $shell-g-global-breakpoints !default;

// 4X-Large
$shell-helper-apply-text-size-4x-large-at-breakpoints: false !default;

$shell-helper-define-text-size-4x-large-breakpoints: $shell-g-global-breakpoints !default;

// 5X-Large
$shell-helper-apply-text-size-5x-large-at-breakpoints: false !default;

$shell-helper-define-text-size-5x-large-breakpoints: $shell-g-global-breakpoints !default;

// 6X-Large
$shell-helper-apply-text-size-6x-large-at-breakpoints: false !default;

$shell-helper-define-text-size-6x-large-breakpoints: $shell-g-global-breakpoints !default;

// 7X-Large
$shell-helper-apply-text-size-7x-large-at-breakpoints: false !default;

$shell-helper-define-text-size-7x-large-breakpoints: $shell-g-global-breakpoints !default;

/**
 * Alignments.
 */

// Center
$shell-helper-apply-text-align-center-at-breakpoints: false !default;

$shell-helper-define-text-align-center-breakpoints: $shell-g-global-breakpoints !default;

// Left
$shell-helper-apply-text-align-left-at-breakpoints: false !default;

$shell-helper-define-text-align-left-breakpoints: $shell-g-global-breakpoints !default;

// Right
$shell-helper-apply-text-align-right-at-breakpoints: false !default;

$shell-helper-define-text-align-right-breakpoints: $shell-g-global-breakpoints !default;

/**
 * Text truncate.
 */

$shell-helper-apply-text-truncate-at-breakpoints: false !default;

$shell-helper-define-text-truncate-breakpoints: $shell-g-global-breakpoints !default;


/**
 * Hide.
 */

// Hide elements from both screen readers and the document flow
$shell-helper-apply-hide-at-breakpoints: false !default;

$shell-helper-define-hide-breakpoints: $shell-g-global-breakpoints !default;

// Hide elements only visually but have it available for screen readers
$shell-helper-apply-hide-visually-at-breakpoints: false !default;

$shell-helper-define-hide-visually-breakpoints: $shell-g-global-breakpoints !default;


/**
 * Spacing.
 */

/**
 * Base.
 */

$shell-helper-apply-spacing-at-breakpoints: false !default;

$shell-helper-define-spacing-breakpoints: $shell-g-global-breakpoints !default;

/**
 * Decrease from base.
 */

// Small
$shell-helper-apply-spacing-small-at-breakpoints: false !default;

$shell-helper-define-spacing-small-breakpoints: $shell-g-global-breakpoints !default;

// X-Small
$shell-helper-apply-spacing-x-small-at-breakpoints: false !default;

$shell-helper-define-spacing-x-small-breakpoints: $shell-g-global-breakpoints !default;

/**
 * Increase from base.
 */

// Large
$shell-helper-apply-spacing-large-at-breakpoints: false !default;

$shell-helper-define-spacing-large-breakpoints: $shell-g-global-breakpoints !default;

// X-Large
$shell-helper-apply-spacing-x-large-at-breakpoints: false !default;

$shell-helper-define-spacing-x-large-breakpoints: $shell-g-global-breakpoints !default;

// 2X-Large
$shell-helper-apply-spacing-2x-large-at-breakpoints: false !default;

$shell-helper-define-spacing-2x-large-breakpoints: $shell-g-global-breakpoints !default;

// 3X-Large
$shell-helper-apply-spacing-3x-large-at-breakpoints: false !default;

$shell-helper-define-spacing-3x-large-breakpoints: $shell-g-global-breakpoints !default;

// 4X-Large
$shell-helper-apply-spacing-4x-large-at-breakpoints: false !default;

$shell-helper-define-spacing-4x-large-breakpoints: $shell-g-global-breakpoints !default;

// 5X-Large
$shell-helper-apply-spacing-5x-large-at-breakpoints: false !default;

$shell-helper-define-spacing-5x-large-breakpoints: $shell-g-global-breakpoints !default;



/**
 * Mixins/Functions.
 */

/* ============================================================================
   MIXINS AND FUNCTIONS
   ========================================================================= */


/**
 * All of Shell's mixins and functions.
 *
 * N.B. all mixins and functions to be written in SassDoc documentation system,
 * see: http://sassdoc.com/.
 *
 * ----------------------------------------------------------------------------
 *
 * CONTENTS:
 *
 * 1. Private mixins and functions
 * 2. HiDPI background images (Mixin)
 * 3. Convert pixels to `rem`s or `em`s (Function)
 * 4. Apply at breakpoints (Mixin)
 * 5. Retrieve from maps (Function)
 * 6. Helpers (Mixin)
 */




/* 1. Private mixins and functions
   ========================================================================= */

/**
 * Shell-only mixins and functions, not for Shell consumers although some can
 * be used if the need arises.
 */


/// Remove a unit from a number.
///
/// @author Chris Pearce
///
/// @access private
///
/// @param {Number [unit]} $number — Number to remove unit from
///
/// @returns {Number}
///
/// @todo Add @exception rules, see: https://gist.github.com/terkel/4373420
///
/// @example scss - Usage
///     strip-unit(24px)
///     strip-unit(2.3em)

@function strip-unit($number) {
    @if type-of($number) == "number" and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }
    @return $number;
}




/* 2. HiDPI background images (Mixin)
   ========================================================================= */

/// Easily apply HiDPI background images. We use a device pixel ratio ("dpr")
/// of "1.3" which captures almost all HiDPI aware devices, see:
/// https://gist.github.com/marcedwards/3446599.
///
/// N.B. Autoprefixer will take care of generating the non-standard
/// `-webkit-device-pixel-ratio` for browsers/devices that need it, see:
/// http://caniuse.com/#feat=css-media-resolution.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {String} $img-url — The image url path
/// @param {Number [unit]} $img-width [auto] — The image width in `px`
/// @param {Number [unit]} $img-height [auto] — The image height in `px`
///
/// @example scss - Usage
///     .element-1 {
///         @include hidpi-bg-img("path/to/image/image.png", 100px, 45px);
///     }
///     .element-2 {
///         @include hidpi-bg-img("path/to/image/image.png", 32px);
///     }
/// @example css - CSS Output
///     .element-1 {
///         @media (min-resolution: 1.3dppx),
///                (min-resolution: 124.8dpi) {
///             background-image: url("path/to/image/image.png");
///             background-size: 100px 45px;
///         }
///     }
///     .element-2 {
///         @media (min-resolution: 1.3dppx),
///                (min-resolution: 124.8dpi) {
///             background-image: url("path/to/image/image.png");
///             background-size: 32px 32px;
///         }
///     }

@mixin hidpi-bg-img($img-url, $img-width: auto, $img-height: auto) {
    @media (min-resolution: $shell-g-hidpi-dppx),
           (min-resolution: $shell-g-hidpi-dpi) {
        background-image: url($img-url);
        background-size: $img-width $img-height;
    }
}




/* 3. Convert pixels to `rem`s or `em`s (Function)
   ========================================================================= */

/// Convert pixels to `em`s.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {Number [unitless]} $value — The pixel value to be converted
/// @param {Number [unitless]} $context [$shell-g-font-size] — The pixel
/// value of the context
///
/// @requires strip-unit()
///
/// @returns {Number [unit]} - Calculated `em` value e.g. `1.45em`
///
/// @todo Add @exception rules, see: https://gist.github.com/terkel/4373420
///
/// @example scss - Usage
///     .element-1 {
///         margin-left: em(20, 18);
///     }
///     .element-2 {
///         margin-left: em(20);
///     }
/// @example css - CSS Output
///     .element-1 {
///         margin-left: 1.111em;
///     }
///     .element-2 {
///         margin-left: 1.25em;
///     }

@function em($value, $context: $shell-g-font-size) {
    @if type-of($value) != "number" or type-of($context) != "number" {
        @error "You have to enter only numbers for `$value` and `$context`.";
    }
    @return strip-unit($value) / strip-unit($context) * 1em;
}


/// Convert pixels to `rem`s.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {Number [unitless]} $value — The pixel value to be converted
///
/// @requires strip-unit()
///
/// @returns {Number [unit]} - Calculated `rem` value e.g. `1.45rem`
///
/// @todo Add @exception rules, see: https://gist.github.com/terkel/4373420
///
/// @example scss - Usage
///     .element {
///         margin-left: rem(20);
///     }
/// @example css - CSS Output
///     .element {
///         margin-left: 1.25rem;
///     }

@function rem($value) {
    @if type-of($value) != "number" {
        @error "You have to enter only a number for `$value`. You entered `#{$value}`.";
    }
    @return strip-unit($value) / strip-unit($shell-g-font-size) * 1rem;
}




/* 4. Apply at breakpoints
   ========================================================================= */

/**
 * This mixin makes it really easy for a Shell consumer to apply certain parts
 * of Shell at any width based breakpoint(s).
 *
 * N.B. the mixin does not support height based breakpoints or breakpoint
 * ranges.
 *
 * The mixin can also be used outside of Shell in project styles but its main
 * purpose is to allow Shell consumers to easily apply certain parts of Shell
 * at any breakpoint(s), mainly the "Grid".
 *
 * The mixin will accept any of the named breakpoints set in "Settings ->
 * Breakpoints" (which can be renamed and breakpoints redefined in your
 * project) or any number (the pixel amount of the viewport). The breakpoints
 * get converted to the `em` unit which is best practice in Responsive Web
 * Design. You can also specify if you want a minimum or maximum width media
 * query by passing in the "min" or "max" labels after you define your
 * breakpoint, the default is minimum width media queries to favour the
 * "Mobile-first" approach.
 *
 * Using this mixin requires you to "opt in" as Shell doesn't want to assume
 * all of its consumers are building responsive UI's requiring the CSS this
 * mixin generates. Opting in requires changing the relevant Boolean settings
 * found in: "Settings". For example if you wanted the "Hide Visually" Helper
 * to use this mixin you change its Boolean setting:
 * `$shell-helper-hide-visually-apply-at-breakpoints` to `true` then define
 * the breakpoints you need via its other setting:
 * `$shell-helper-hide-visually-define-breakpoints`. So in the "Shell
 * Overrides" section of your project "Settings" you will have something like
 * this, depending on what breakpoints you choose:
 *
   $shell-helper-hide-visually-apply-at-breakpoints: true;
   $shell-helper-hide-visually-define-breakpoints: (400 max, lap, desk);
 *
 * You define your breakpoints in a comma separated list enclosed in curly
 * brackets with the "min" or "max" labels always coming *after* the
 * breakpoint. If you want ALL of the named breakpoints defined here:
 * "Settings -> Breakpoints" then you can simply pass in the word "all", like
 * so:
 *
   $shell-helper-hide-visually-define-breakpoints: (all);
 *
 * Right now the mixin only allows "all" by itself i.e. you cannot add numbers
 * (non-named breakpoints), so doing this will not work:
 *
   $shell-helper-hide-visually-define-breakpoints: (all, 900);
 *
 * Shell has a global breakpoint setting set in "Settings -> Breakpoints" so
 * that you can easily share breakpoints across everything that uses the
 * mixin. By default Shell doesn't apply any breakpoints to this setting, this
 * is for the Shell consumer to apply if they need the ability for shared
 * global breakpoints. So in the "Shell Overrides" section of your project
 * "Settings" you could do this:
 *
   $shell-g-global-breakpoints: (lap, desk);
 */

/// Outputs minimum and maximum width media-queries for some of Shell's
/// "Helpers" and all of Shell's "Grid column widths" at breakpoints defined
/// by the consumers of Shell.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {String} $class-selector - Class selector used to generate the final
/// class e.g. `.h-hide-visually` -> `.h-hide-visually-from-lap`.
/// @param {List} $breakpoints - A list of breakpoints either named
/// breakpoints e.g. `(palm, lap)`, integers e.g. `(400, 740)`, or "all" to
/// generate all the named breakpoints e.g. `(all)`. Each breakpoint can be
/// accompanied with a "max" or "min" limit label to tell the mixin to
/// generate a `min-width` or `max-width` media query e.g.
/// `(lap-large max, 460 max)`, the default is `min-width`.
///
/// @todo
/// Allow number breakpoints to be passed in along with "all"
/// Add @exception rules, see: https://gist.github.com/terkel/4373420
///
/// @example scss - Usage
///     $shell-helper-hide-visually-define-breakpoints: (400 max, lap);
///
///     $shell-grid-col-4-define-breakpoints: (lap-large);
/// @example css - CSS Output
///     @media (max-width: 25em) {
///         .h-hide-visually-up-to-400 {
///             border: 0;
///             clip: rect(0 0 0 0);
///             height: 1px;
///             margin: -1px ;
///             overflow: hidden;
///             padding: 0;
///             position: absolute;
///             width: 1px;
///         }
///     }
///     @media (min-width: 40.0625em) {
///         .h-hide-visually-from-lap {
///             border: 0;
///             clip: rect(0 0 0 0);
///             height: 1px;
///             margin: -1px ;
///             overflow: hidden;
///             padding: 0;
///             position: absolute;
///             width: 1px;
///         }
///     }
///
///     @media (min-width: 56.3125em) {
///         .l-grid--col-2-from-lap-large {
///             width: 16.6666%;
///         }
///     }

@mixin apply-at-breakpoints($class-selector, $breakpoints: ()) {

    // So we can pass in "all" which will generate all of the media queries
    // using all of the named breakpoints from "Settings -> Breakpoints"
    // N.B. you cannot pass in a limit when using this—the limit will use the
    // default: `min-width` except for "Palm" which uses: `max-width`
    $all-breakpoints: map-keys($shell-g-breakpoints);
    @if $breakpoints == "all" {
        $breakpoints: $all-breakpoints;
    }

    // When defining a breakpoint with a limit: "max" or "min", it needs to
    // be cast into a list of lists otherwise the mixin assumes there is a
    // breakpoint called "max" or "min"
    @if length($breakpoints) == 2 and index((min max), nth($breakpoints, 2)) {
        $breakpoints-copy: $breakpoints;
        $breakpoints: ();
        $breakpoints: append($breakpoints, (nth($breakpoints-copy, 1) nth($breakpoints-copy, 2)));
    }

    // Loop through all the breakpoints passed in from the Shell consumer side
    @each $breakpoint in $breakpoints {

        // The "max" or "min" limit used for the media feature part of the
        // media query: `min-width` or `max-width`, default is always "min"
        $limit-min: "min";
        $limit-max: "max";
        $limit: $limit-min;

        // The "max" or "min" limit label that gets appended to the
        // generated class selector
        $limit-label: "from";

        // When defining a breakpoint with a limit—which is of type `list()`—
        // we need to check this so we can separate the breakpoint and the
        // limit parts, so they can be used in the relevant parts of the
        // generated media query
        @if type-of($breakpoint) == "list" {
            $limit: nth($breakpoint, 2);
            $breakpoint: nth($breakpoint, 1);
        }

        // Palm is a special case as it needs to use a `max-width` media query
        // as its viewport range is 0–640px
        @if $breakpoint == "palm" {
            $limit: $limit-max;
        }

        // We have to check if the breakpoint is a number or a named breakpoint
        // so that we can apply the relevant functions: `em()` and `bp()` so
        // that we can generate the breakpoint value correctly
        @if type-of($breakpoint) == "number" {
            $breakpoint: strip-unit($breakpoint);
            $generate-breakpoint: em($breakpoint, 16);
        } @else {
            $generate-breakpoint: bp($breakpoint);
        }

        // Change the limit label when a "max" limit is used
        @if $limit == $limit-max {
            $limit-label: "up-to";
        }

        // Construct the generated media query with the passed in limit and
        // breakpoint
        @media (#{$limit}-width: $generate-breakpoint) {
            // The generated class selector split into 3 parts:
            // [class-selector-passed-in]
            // [limit-label(min/max)]
            // [breakpoint(integer/named-breakpoint)]
            // E.g.
            // `.h-hide-visually-from-900`
            // `.h-hide-visually-up-to-palm`
            $generated-selector: "#{$class-selector}-#{$limit-label}-#{$breakpoint}";

            // The contents of the media query
            #{$generated-selector} {
                @content;
            }
        }
    }
}




/* 5. Retrieve from maps
   ========================================================================= */

/**
 * An easier way to apply keys from the Shell maps defined in "Settings"
 * instead of using the native `map-get` function which can get tedious to
 * type again and again.
 *
 * For example, if you wanted to apply a key from the "Z-Index system" map
 * using the native `map-get` function you would have to do it like this:
 *
    z-index: map-get($shell-g-z-layers, header);
 *
 * And when applying nested map keys, this:
 *
    z-index: map-get(map-get($shell-g-z-layers, modal-elements), close-button);
 *
 * Instead we can apply it in a much nicer way:
 *
    z-index: z(header);
 *
 * And for a nested map key:
 *
    z-index: z(modal-elements, close-button);
 */


/// An easier way to apply keys from the "Breakpoints" map.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {String} $breakpoint — The breakpoint name which is the map key
/// name
///
/// @returns {Number [unit]} - The breakpoint converted to an `em` unit, the
/// conversion happens in the "Breakpoints" map values
///
/// @todo Add @exception rules, see: https://gist.github.com/terkel/4373420
///
/// @example scss - Usage
///     @media (max-width: bp(palm)) {
///         background-color: crimson;
///     }
///     @media (min-width: bp(desk)) {
///         background-color: crimson;
///     }
/// @example css - CSS Output
///     @media (max-width: 40em) {
///         background-color: crimson;
///     }
///     @media (min-width: 75em) {
///         background-color: crimson;
///     }

@function bp($breakpoint) {
    @if not map-has-key($shell-g-breakpoints, $breakpoint) {
        @error "Sorry but `#{$breakpoint}` doesn't exist as a breakpoint name in the "Breakpoints" map.";
    }
    @return map-get($shell-g-breakpoints, $breakpoint);
}


/// An easier way to apply keys from the "Z-Index system" map.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {String} $z-index-layer — The `z-index` layer name which is the map
/// key name
/// @param {String} $z-index-layer-nested [null] — The nested `z-index` layer
/// name which is the nested map key name
///
/// @returns {Number [unitless]} - The `z-index` layer number
///
/// @todo Add @exception rules, see: https://gist.github.com/terkel/4373420
///
/// @example scss - Usage
///     .element-1 {
///         z-index: z(header);
///     }
///     .element-2 {
///         z-index: z(modal-elements, close-button);
///     }
/// @example css - CSS Output
///     .element-1 {
///         z-index: 3;
///     }
///     .element-2 {
///         z-index: 1;
///     }

@function z($z-index-layer, $z-index-layer-nested: null) {
    @if not map-has-key($shell-g-z-layers, $z-index-layer) {
        @error "Sorry but `#{$z-index-layer}` doesn't exist as a `z-index` name in the 'Z-Index system' map.";
    }
    @if ($z-index-layer-nested != null) {
        @return map-get(map-get($shell-g-z-layers, $z-index-layer), $z-index-layer-nested);
    } @else {
        @return map-get($shell-g-z-layers, $z-index-layer);
    }
}




/* 6. Helpers
   ========================================================================= */

/**
 * Here are all the Helper mixins, see the Helpers intro comment block for
 * more information.
 */


/// Makes an element expand to contain floated children.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {Boolean} $apply-important-keyword [false] — Whether to apply the
/// `!important` keyword
///
/// @example scss - Usage
///     .element-1 {
///         @include clear-fix();
///     }
///     .element-2 {
///         @include clear-fix(true);
///     }
/// @example css - CSS Output
///     .element-1::after {
///         clear: both;
///         content: "";
///         display: table;
///     }
///     .element-2::after {
///         clear: both !important;
///         content: "" !important;
///         display: table !important;
///     }

@mixin clear-fix($apply-important-keyword: false) {
    $important-keyword: if($apply-important-keyword, " !important", "");
    &::after {
        clear: both#{$important-keyword};
        content: ""#{$important-keyword};
        display: table#{$important-keyword};
    }
}


/// Truncate some text using an ellipsis.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {Boolean} $apply-important-keyword [false] — Whether to apply the
/// `!important` keyword
/// @param {String} $display [block] — Set the display property of the element
///
/// @example scss - Usage
///     .element-1 {
///         @include text-truncate(false, inline-block);
///     }
///     .element-2 {
///         @include text-truncate(true);
///     }
/// @example css - CSS Output
///     .element-1 {
///         display: inline-block;
///         overflow: hidden;
///         text-overflow: ellipsis;
///         white-space: nowrap;
///     }
///     .element-2 {
///         display: block !important;
///         overflow: hidden !important;
///         text-overflow: ellipsis !important;
///         white-space: nowrap !important;
///     }

@mixin text-truncate($apply-important-keyword: false, $display: block) {
    $important-keyword: if($apply-important-keyword, " !important", "");
    $display-property-value: if($display == block, "block", $display);
    display: #{$display-property-value}#{$important-keyword};
    overflow: hidden#{$important-keyword};
    text-overflow: ellipsis#{$important-keyword};
    white-space: nowrap#{$important-keyword};
}


/// Make text on OS X look more consistent with other systems that do not
/// render text using sub-pixel anti-aliasing.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {Boolean} $apply-important-keyword [false] — Whether to apply the
/// `!important` keyword
///
/// @example scss - Usage
///     .element-1 {
///         @include text-osx-font-smoothing();
///     }
///     .element-2 {
///         @include text-osx-font-smoothing(true);
///     }
/// @example css - CSS Output
///     .element-1 {
///         -moz-osx-font-smoothing: grayscale;
///         -webkit-font-smoothing: antialiased;
///     }
///     .element-2 {
///         -moz-osx-font-smoothing: grayscale !important;
///         -webkit-font-smoothing: antialiased !important;
///     }

@mixin text-osx-font-smoothing($apply-important-keyword: false) {
    $important-keyword: if($apply-important-keyword, " !important", "");
    -moz-osx-font-smoothing: grayscale#{$important-keyword};
    -webkit-font-smoothing: antialiased#{$important-keyword};
}


/// Hide elements only visually but have it available for screen readers.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {Boolean} $apply-important-keyword [false] — Whether to apply the
/// `!important` keyword
///
/// @example scss - Usage
///     .element-1 {
///         @include hide-visually();
///     }
///     .element-2 {
///         @include hide-visually(true);
///     }
/// @example css - CSS Output
///     .element-1 {
///         border: 0;
///         clip: rect(0 0 0 0);
///         height: 1px;
///         margin: -1px ;
///         overflow: hidden;
///         padding: 0;
///         position: absolute;
///         width: 1px;
///     }
///     .element-2 {
///         border: 0 !important;
///         clip: rect(0 0 0 0) !important;
///         height: 1px !important;
///         margin: -1px !important;
///         overflow: hidden !important;
///         padding: 0 !important;
///         position: absolute !important;
///         width: 1px !important;
///     }

@mixin hide-visually($apply-important-keyword: false) {
    $important-keyword: if($apply-important-keyword, " !important", "");
    border: 0#{$important-keyword};
    clip: rect(0 0 0 0)#{$important-keyword};
    height: 1px#{$important-keyword};
    margin: -1px #{$important-keyword};
    overflow: hidden#{$important-keyword};
    padding: 0#{$important-keyword};
    position: absolute#{$important-keyword};
    width: 1px#{$important-keyword};
}


/// Makes an element be aligned horizontally and vertically using Flexbox, must
/// go on the parent of the element that needs the alignment.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {Boolean} $apply-important-keyword [false] — Whether to apply the
/// `!important` keyword
///
/// @example scss - Usage
///     .element-1 {
///         @include align-horizontally-and-vertically();
///     }
///     .element-2 {
///         @include align-horizontally-and-vertically(true);
///     }
/// @example css - CSS Output
///     .element-1 {
///         align-items: center;
///         display: flex;
///         flex-flow: column;
///         justify-content: center;
///     }
///     .element-2 {
///         align-items: center !important;
///         display: flex !important;
///         flex-flow: column;
///         justify-content: center !important;
///     }

@mixin align-horizontally-and-vertically($apply-important-keyword: false) {
    $important-keyword: if($apply-important-keyword, " !important", "");
    align-items: center#{$important-keyword};
    display: flex#{$important-keyword};
    flex-flow: column;
    justify-content: center#{$important-keyword};
}


/// Makes an element be aligned horizontally and vertically using `position`
/// and `transform`, must go on the element that needs the alignment and the
/// elements parent must have `position: relative;`.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {Boolean} $apply-important-keyword [false] — Whether to apply the
/// `!important` keyword
///
/// @example scss - Usage
///     .element-1 {
///         @include align-horizontally-and-vertically-alt();
///     }
///     .element-2 {
///         @include align-horizontally-and-vertically-alt(true);
///     }
/// @example css - CSS Output
///     .element-1 {
///         left: 50%;
///         position: absolute;
///         top: 50%;
///         transform: translate(-50%, -50%);
///     }
///     .element-2 {
///         left: 50% !important;
///         position: absolute !important;
///         top: 50% !important;
///         transform: translate(-50%, -50%) !important;
///     }

@mixin align-horizontally-and-vertically-alt($apply-important-keyword: false) {
    $important-keyword: if($apply-important-keyword, " !important", "");
    left: 50%#{$important-keyword};
    position: absolute#{$important-keyword};
    top: 50%#{$important-keyword};
    transform: translate(-50%, -50%)#{$important-keyword};
}


/// A container that retains the aspect ratio of its content when that content
/// needs to adapt to the width of varying viewports.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {Boolean} $apply-important-keyword [false] — Whether to apply the
/// `!important` keyword
/// @param {List} $ratio [16 9] - The ratio of the content e.g. `3 1`, `4 3`.
///
/// @exception `$ratio` must be a list with two values
///
/// @example scss - Usage
///     .element-1 {
///         @include intrinsic-ratio-container(false, 3 1);
///     }
///     .element-2 {
///         @include intrinsic-ratio-container(true);
///     }
/// @example css - CSS Output
///     .element-1 {
///         display: block;
///         height: 0;
///         overflow: hidden;
///         padding-bottom: 33.333%;
///         position: relative;
///     }
///     .element-2 {
///         display: block !important;
///         height: 0 !important;
///         overflow: hidden !important;
///         padding-bottom: 56.25% !important;
///         position: relative !important;
///     }

@mixin intrinsic-ratio-container($apply-important-keyword: false, $ratio: 16 9) {
    $important-keyword: if($apply-important-keyword, " !important", "");
    @if length($ratio) < 2 or length($ratio) > 2 {
        @error "#{inspect($ratio)} must be a list with two values.";
    }
    display: block#{$important-keyword};
    height: 0#{$important-keyword};
    overflow: hidden#{$important-keyword};
    padding-bottom: percentage(nth($ratio, 2) / nth($ratio, 1))#{$important-keyword};
    position: relative#{$important-keyword};
 }


/// The content container for the "Intrinsic ratio container" mixin.
///
/// @author Chris Pearce
///
/// @access public
///
/// @param {boolean} $apply-important-keyword [false] — Whether to apply the
/// `!important` keyword
///
/// @example scss - Usage
///    .element-1 {
///         @include intrinsic-ratio-content();
///     }
///     .element-2 {
///         @include intrinsic-ratio-content(true);
///     }
/// @example css - CSS Output
///    .element-1 {
///         height: 100%;
///         left: 0;
///         position: absolute;
///         top: 0;
///         width: 100%;
///     }
///     .element-2 {
///         height: 100% !important;
///         left: 0 !important;
///         position: absolute !important;
///         top: 0 !important;
///         width: 100% !important;
///     }

 @mixin intrinsic-ratio-content($apply-important-keyword: false) {
    $important-keyword: if($apply-important-keyword, " !important", "");

    height: 100%#{$important-keyword};
    left: 0#{$important-keyword};
    position: absolute#{$important-keyword};
    top: 0#{$important-keyword};
    width: 100%#{$important-keyword};
 }



/**
 * Normalise/Reset.
 */

/* ============================================================================
   NORMALISE AND RESET
   ========================================================================= */


/**
 * Let's get all browsers rendering all elements more consistently and in line
 * with modern standards, and let's nuke certain user-agent styles so that
 * everything is on an even playing field.
 *
 * We can also be a bit opinionated about CM specific style treatments.
 *
 * N.B. we should be keeping an eye on the normalize.css repo especially the
 * Issues: https://github.com/necolas/normalize.css/issues/.
 *
 * @credit
 * https://necolas.github.io/normalize.css/
 *
 * ----------------------------------------------------------------------------
 *
 * CONTENTS:
 *
 * 1. Root element and global resets
 * 2. Block-level elements
 * 3. Inline elements
 * 4. Embedded, image, and multimedia, elements
 * 5. Form elements
 * 6. Interactions
 */




/* 1. Root element and global resets
   ========================================================================= */

/**
 * 1. Reset the `box-sizing` property to the more friendly `border-box` value.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */

html {
    box-sizing: border-box; // [1]
    -ms-text-size-adjust: 100%; // [2]
    -webkit-text-size-adjust: 100%; // [2]
}

// [1]
*,
*::before,
*::after {
    box-sizing: inherit;
}


/**
 * Remove all margins, paddings, and borders.
 *
 * N.B. do not include the following elements:
 * - `<input>`
 * - `<button>`
 * - `<textarea>`
 *
 * The complete list of HTML5 elements:
 * https://developer.mozilla.org/en/docs/Web/Guide/HTML/HTML5/HTML5_element_list
 */

a,
abbr,
address,
article,
aside,
b,
blockquote,
body,
caption,
cite,
code,
dd,
del,
details,
dfn,
dialog,
div,
dl,
dt,
em,
fieldset,
figcaption,
figure,
footer,
form,
h1,
h2,
h3,
h4,
h5,
h6,
header,
html,
i,
iframe,
img,
ins,
kbd,
label,
legend,
li,
main,
menu,
nav,
object,
ol,
p,
pre,
q,
s,
samp,
section,
small,
span,
strong,
sub,
summary,
sup,
table,
tbody,
td,
tfoot,
th,
thead,
time,
tr,
u,
ul,
var {
    margin: 0;
    padding: 0;
    border: 0;
}




/* 2. Block-level elements
   ========================================================================= */

/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 * 2. Add the correct display in IE.
 */

article,
aside,
details, // [1]
figcaption,
figure,
footer,
header,
main, // [2]
menu,
nav,
section,
summary { // [1]
    display: block;
}


/**
 * Add the correct display in IE 10-.
 * 1. Add the correct display in IE.
 */

template, // [1]
[hidden] {
    display: none;
}


/**
 * Reset lists, this is in addition to removing `margin` and `padding` in
 * **Root element and global resets**.
 */

ul,
ol {
    list-style-type: none;
}


/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */

hr {
    box-sizing: content-box; // [1]
    height: 0; // [1]
    overflow: visible; // [2]
}




/* 3. Inline elements
   ========================================================================= */

/**
 * Add the correct display in IE 9-.
 */

audio,
canvas,
progress,
video {
    display: inline-block;
}


/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */

a {
    background-color: transparent; // [1]
    -webkit-text-decoration-skip: objects; // [2]
}


/**
 * Remove the outline on focused links when they are also active or hovered
 * in all browsers.
 */

a:active,
a:hover {
    outline-width: 0;
}


/**
 * 1. Remove the bottom border in Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */

abbr[title] {
    border-bottom: none; // [1]
    text-decoration: underline; // [2]
    text-decoration: underline dotted; // [2]
}


/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */

b,
strong {
    font-weight: inherit;
}


/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */

b,
strong {
    font-weight: bolder;
}


/**
 * Add the correct font style in Android 4.3-.
 */

dfn {
    font-style: italic;
}


/**
 * Address inconsistent and variable font size in all browsers.
 */

small {
    font-size: 100%;
}


/**
 * Prevent `<sub>` and `<sup>` affecting line height in all browsers.
 */

sub,
sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
}

sub {
    bottom: -0.25em;
}

sup {
    top: -0.5em;
}


/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */

code,
kbd,
pre,
samp {
    font-family: monospace, monospace; // [1]
    font-size: 1em; // [2]
}




/* 4. Embedded, image and multimedia, elements
   ========================================================================= */

/**
 * Remove the gap between media elements and the bottom of their containers.
 * See: https://github.com/h5bp/html5-boilerplate/issues/440.
 */

audio,
canvas,
iframe,
img,
svg,
video {
    vertical-align: middle;
}


/**
 * Add the correct display in iOS 4-7.
 */

audio:not([controls]) {
    display: none;
    height: 0;
}


/**
 * Hide the overflow in IE.
 */

svg:not(:root) {
    overflow: hidden;
}




/* 5. Form elements
   ========================================================================= */

/**
 * N.B. known limitation: by default, Chrome and Safari on OS X allow very
 * limited styling of `<select>`s, unless a `border` property is set.
 */


/**
 * 1. Change font properties to `inherit` in all browsers.
 * 2. Remove the margin in Firefox and Safari.
 */

button,
input,
select,
textarea {
    font: inherit; // [1]
    margin: 0; // [2]
}


/**
 * Restore the font weight unset by the previous rule.
 */

optgroup {
    font-weight: bold;
}


/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */

button,
input { // [1]
    overflow: visible;
}


/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */

button,
select { // [1]
    text-transform: none;
}


/**
 * Reset all styles so we have a blank canvas.
 */

button {
    background: transparent;
    border: 0;
    padding: 0;
}


/**
 * 1. Prevent a WebKit bug where (2) destroys native `<audio>` and `<video>`
 *    controls in Android 4.
 * 2. Improve usability and consistency of cursor style between image-type
 *    `<input>` and others.
 * 3. Correct the inability to style clickable types in iOS and Safari.
 */

button,
html [type="button"], // [1]
[type="reset"],
[type="submit"] {
    cursor: pointer; // [2]
    -webkit-appearance: button; // [3]
}


/**
 * Remove the inner border and padding in Firefox.
 */

button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
    border-style: none;
    padding: 0;
}


/**
 * Restore the focus styles unset by the previous rule.
 */

button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
    outline: 1px dotted ButtonText;
}


/**
 * Indicate that `<label>` will shift focus to the associated `<input>`
 * element.
 */

label {
    cursor: pointer;
}


/**
 * 1. Remove the default vertical scrollbar in IE.
 * 2. Disable `<textarea>`s from being resized horizontally.
 */

textarea {
    overflow: auto; // [1]
    resize: vertical; // [2]
}


/**
 * Chrome and Firefox set a `min-width: min-content;` on `<fieldset>`s, so we
 * reset that to ensure it behaves more like a standard block element, see:
 * http://stackoverflow.com/questions/17408815/fieldset-resizes-wrong-appears-to-have-unremovable-min-width-min-content.
 */

fieldset {
    min-width: 0;
}

// Firefox only
@-moz-document url-prefix() {
    fieldset {
        display: table-cell;
    }
}


/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the colour inheritance from `<fieldset>` elements in IE.
 */

legend {
    color: inherit; // [2]
    display: table; // [1]
    max-width: 100%; // [1]
    white-space: normal; // [1]
}


/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */

progress {
    vertical-align: baseline;
}


/**
 * Apply the `not-allowed` cursor for disabled elements (`<button>`, `<input>`,
 * `<textarea>`, `<optgroup>`, `<option>` and `<fieldset>`) and disable pointer
 * events.
 */

:disabled {
    cursor: not-allowed;
    pointer-events: none;
}


/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */

[type="checkbox"],
[type="radio"] {
    box-sizing: border-box; // [1]
    padding: 0; // [2]
}


/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */

[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
    height: auto;
}


/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */

[type="search"] {
    -webkit-appearance: textfield; // [1]
    outline-offset: -2px; // [2]
}


/**
 * Remove the inner padding and cancel buttons in Chrome and Safari on OS X.
 */

[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
    -webkit-appearance: none;
}


/**
 * Correct the text style of placeholders in Chrome, Edge, and Safari.
 */

::-webkit-input-placeholder {
    color: inherit;
    opacity: 0.54;
}


/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */

::-webkit-file-upload-button {
    -webkit-appearance: button; // [1]
    font: inherit; // [2]
}


/**
 * Remove the clear field button (an "X" icon) and the reveal password button
 * (an "eye" icon) that is generated by IE 10+ for textual inputs. See:
 * http://stackoverflow.com/a/21869433/1116204
 */

::-ms-clear,
::-ms-reveal {
    display: none;
}


/**
 * Unstyle the caret on `<select>`s in IE 10+.
 */

::-ms-expand {
    background-color: transparent;
    border: 0;
}


/**
 * Rules for iOS devices.
 *
 * We isolate these rules behind an `.target-ios` class that is appended to the
 * `<html>` element via user-agent sniffing, for example:
 *
    <html class="target-ios">
 *
 * N.B. this functionality is not part of the Shell library, you will need to
 * add it yourself to the project Shell applies too.
 */

.target-ios {

    /**
     * Fixes "clickability" issue (and more generally, the firing of events
     * such as focus as well) for traditionally non-focusable elements with
     * `[role="button"]`, see:
     * https://developer.mozilla.org/en-US/docs/Web/Events/click#Safari_Mobile
     */

    [role="button"] {
        cursor: pointer;
    }


    /**
     * Remove the top inner shadow from iOS inputs. See:
     * https://davidwalsh.name/input-shadows-ipad
     */

    #{$shell-g-textual-inputs},
    textarea {
        -webkit-appearance: caret;
    }


    /**
     * Remove rounded corners that iOS applies to all `<input>` buttons.
     */

    [type="submit"],
    [type="button"],
    [type="image"],
    [type="reset"] {
        border-radius: 0;
    }
}




/* 6. Interactions
   ========================================================================= */

/**
 * Suppress the focus outline on links that cannot be accessed via a keyboard.
 * This prevents an unwanted focus outline from appearing around elements that
 * might still respond to pointer events.
 *
 * N.B. it is okay to use `!important` here as we're doing it pre-emptively
 * i.e. you know you will always want the rule it's applied too to take
 * precedence.
 */

[tabindex="-1"]:focus {
    outline: none !important;
}


/**
 * Avoid 300ms click delay on touch devices that support the `touch-action` CSS
 * property.
 *
 * In particular, unlike most other browsers, IE 11+Edge on Windows 10 on touch
 * devices and IE Mobile 10-11 DON'T remove the click delay when
 * `<meta name="viewport" content="width=device-width">` is present.
 * However, they DO support removing the click delay via
 * `touch-action: manipulation`.
 *
 * See:
 * - http://caniuse.com/#feat=css-touch-action
 * - http://patrickhlauke.github.io/touch/tests/results/#suppressing-300ms-delay
 * - https://adactio.com/journal/10019
 */

a,
area,
button,
input,
label,
select,
summary,
textarea,
[tabindex]:not([tabindex="-1"]) {
    touch-action: manipulation;
}


/**
 * Remove `:focus` styles for `coarse` input mechanisms, and on the `:hover`
 * pseudo class.
 */

@media (pointer: coarse) and (hover: none) {
    :focus {
        outline: none;
    }
}



/**
 * Base.
 */

/* ============================================================================
   BASE
   ========================================================================= */


/**
 * Here we provide very basic styling that most UI's will need. These styles
 * are applied at the most global level being applied via element selectors,
 * except for "Headings" which are scoped to classes (see that section for the
 * info).
 *
 * Everything in Base needs to be easily overridden which is really easy to do
 * as everything in Base sits right at the bottom in terms of specificity.
 *
 * ----------------------------------------------------------------------------
 *
 * CONTENTS:
 *
 * 1. Root element
 * 2. Links
 * 3. Horizontal rule
 * 4. Images
 * 5. Forms
 * 6. Paragraphs
 * 7. Headings
 * 8. Print
 */




/* 1. Root element
   ========================================================================= */

html {
    background: $shell-base-root-element-background-color;
    color: $shell-g-color-text;
    font-family: $shell-g-font-family;
    font-size: $shell-g-font-size / 16 * 1em;
    font-weight: $shell-g-font-weight-normal;
    line-height: $shell-g-line-height;
}




/* 2. Links
   ========================================================================= */

a {
    color: $shell-g-color-link;
    text-decoration: $shell-base-link-text-decoration;

    &:hover,
    &:focus {
        color: $shell-g-color-link-hover;
        text-decoration: $shell-base-link-text-decoration-on-hover;
    }
}




/* 3. Horizontal rule
   ========================================================================= */

hr {
    border-top: $shell-base-hr-thickness $shell-base-hr-style $shell-base-hr-color;
    display: block;
    height: 1px;
}




/* 4. Images
   ========================================================================= */

/**
 * 1. Make responsive, i.e. keep images from scaling beyond the width of their
 *    parents.
 * 2. `[alt]` text is visually offset if images don't load.
 */

img {
    max-width: 100%; // [1]
    height: auto; // [1]
    font-style: italic; // [2]
}


/**
 * Third-party widgets—like Google Maps—cannot have their images be responsive
 * as this breaks any images used within them therefore we remove that by
 * applying the two possible Google Map container selectors plus a generic
 * container selector to be used for other third-party widgets.
 *
 * N.B. it is okay to use `!important` here as we're doing it pre-emptively
 * i.e. you know you will always want the rule it's applied to to take
 * precedence.
 */

.remove-responsive-images img,
#map_canvas img,
.map_canvas img {
    max-width: none !important;
}




/* 5. Forms
   ========================================================================= */

/**
 * Apply an optional `opacity` style for disabled and read-only states.
 *
 * N.B. if developing for iOS be aware of this bug:
 * "Safari Mobile for iOS applies a default style of `opacity: 0.4` to disabled
 * textual `<input>` elements. Other major browsers don't currently share this
 * particular default style."
 * —https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input#Browser_compatibility
 */

@if $shell-base-apply-style-to-disabled-and-readonly-states {
    :disabled,
    [readonly] {
        opacity: $shell-base-disabled-and-readonly-state-opacity-strength;
    }
}




/* 6. Paragraphs
   ========================================================================= */

/**
 * Apply an optional bottom margin to all paragraphs.
 */

@if $shell-base-apply-bottom-margin-to-paragraphs {
    p {
        margin-bottom: rem($shell-g-spacing);

        &:last-child {
            margin-bottom: 0;
        }
    }
}




/* 7. Headings
   ========================================================================= */

/**
 * Here we scope our Base Heading styles to classes instead of the `hx` element
 * selector so our styles are not tied to the semantics of the heading element,
 * i.e. if you want a `h4` to look like a `h2` you can easily do this.
 *
 * N.B. spacing (`bottom-margin`) is handled via the "Spacing" helpers.
 */


/**
 * Neutralise all the heading elements in favour of applying styles via the
 * `.heading` class and its modifiers. We make all the heading elements use the
 * default typography styles and we may as well apply the heading colour.
 *
 * N.B. `margin` and `padding` are taken care of in "Normalise/Reset".
 */


h1,
h2,
h3,
h4,
h5,
h6 {
    color: $shell-g-color-text;
    font-size: rem($shell-g-font-size);
    font-weight: $shell-g-font-weight-normal;
    line-height: $shell-g-line-height;
}


/**
 * Base `.heading` styles.
 */

.heading {
    color: $shell-g-color-text;
    font-size: rem($shell-g-font-size);
    font-weight: $shell-g-font-weight-normal;
}

/**
 * Modifiers: Main heading.
 */

.heading--main {
    font-size: rem($shell-g-font-size-large);
    font-weight: $shell-g-font-weight-light;
}

/**
 * Modifiers: Section heading.
 */

.heading--section {
    font-weight: bold;
}




/* 8. Print
   ========================================================================= */

/**
 * N.B. it is okay to use `!important` here as we're doing it pre-emptively
 * i.e. you know you will always want the rule it's applied too to take
 * precedence.
 */

@media print {

    /**
     * Apply print friendly styles to all the things.
     */

    *,
    *::before,
    *::after,
    *::first-letter,
    *::first-line {
        background: transparent !important;
        box-shadow: none !important;
        color: #000 !important;
        text-shadow: none !important;
    }


    /**
     * Hide elements not really useful on a piece of paper.
     */

    nav,
    video,
    audio {
        display: none !important;
    }


    /**
     * Ensure all images are responsive.
     */

    img {
        height: auto !important;
        max-width: 100% !important;
    }


    /**
     * Make links always stand out.
     */

    a,
    a:visited {
        border-bottom: 0 !important;
        text-decoration: underline !important;
    }


    /**
     * Show the `[href]` and `[title]` attribute values of links and
     * abbreviations via their `::after` pseudo element.
     */

    a[href]::after {
        content: " (" attr(href) ")";
    }

    abbr[title]::after {
        content: " (" attr(title) ")";
    }

    // Don't show links that are fragment identifiers, or use the
    // `javascript:` pseudo protocol
    a[href^="javascript:"]::after,
    a[href^="#"]::after {
        content: "";
    }


    /**
     * Make the header row repeated at the top of each printed page, see:
     * http://css-discuss.incutio.com/wiki/Printing_Tables
     */

    thead {
        display: table-header-group;
    }


    /**
     * Set page breaks, orphans and widows.
     */

    // Page breaks
    h2
    h3 {
        page-break-after: avoid;
    }

    tr,
    img,
    pre,
    blockquote {
        page-break-inside: avoid;
    }

    // Orphans and widows
    p,
    h2,
    h3 {
        orphans: 3;
        widows: 3;
    }
}



/**
 * Container.
 */

/* ============================================================================
   CONTAINER
   ========================================================================= */


/**
 * Pretty much every UI will need to be constrained by a container or a
 * series of them (modifiers of the base container), e.g. a wider container,
 * a narrower container, etc. Repeating the CSS of these crucial structural
 * UI elements does not make for a robust, scalable, consistent, and
 * maintainable UI. So we abstract that CSS out here.
 *
 * Container(s) can be used anywhere it makes sense to do so including within
 * components. They are 100% wide until their `max-width` kicks in, they have
 * default left and right gutters that equal the divine number multiplied
 * by 3, and are center aligned by default.
 *
 * Other styles cannot be applied to an element using a container. Container is
 * a "Layout Module" therefore the Single Responsibility Principle and the
 * Open/Close Principle strictly applies. So this would be invalid:
 *
    <div class="l-container  c-card">
        […]
    </div>
 *
 * Here we have wrongly applied a "Component" (`c-card`) to the same element as
 * a "Layout Module", we've mixed concerns, this can result in this part of
 * the UI being prone to breakages. The valid way to approach this would be:
 *
    <div class="l-container">
        <div class="c-card">
            […]
        </div>
    </div>
 *
 * ----------------------------------------------------------------------------
 *
 * Container is namespaced with "l" followed by one hyphen, like this:
 *
   l-container
 *
 * The "l" stands for "layout" as Container is a "Layout Module".
 *
 * ----------------------------------------------------------------------------
 *
 * @markup
    <div class="l-container [modifier(s)]">
        […]
    </div>
 */


/**
 * 1. Allows for the `<span>` element to be used.
 */

.l-container {
    display: block; // [1]
    max-width: rem($shell-container-maximum-width);
    min-width: rem($shell-container-minimum-width);
    padding-left: rem($shell-container-gutter);
    padding-right: rem($shell-container-gutter);
    width: 100%;

    @if $shell-container-apply-center-alignment {
        margin: 0 auto;
    }
}


/**
 * Modifiers: narrower and wider containers.
 */

.l-container--small {
    max-width: rem($shell-container-maximum-width-small);
}

.l-container--x-small {
    max-width: rem($shell-container-maximum-width-x-small);
}

.l-container--large {
    max-width: rem($shell-container-maximum-width-large);
}

.l-container--x-large {
    max-width: rem($shell-container-maximum-width-x-large);
}



/**
 * Grid.
 */

/* ============================================================================
   GRID
   ========================================================================= */

/**
 * A powerful "Mobile-first" Flexbox-based grid that is responsive ready (all
 * grid column widths are fluid using the `%` unit), nestable, and comes with
 * a bunch of handy modifiers. This makes the grid the workhorse of your UI
 * builds, any layout you need always look to the grid first—including within
 * your "Components", it exists so you don't have to write redundant CSS to
 * construct layouts.
 *
 * Every grid column width can be generated at any breakpoint thanks to the
 * mixin found here: "Mixins and Functions -> Apply at breakpoints". So if you
 * wanted 2 columns at smaller viewports then go to 4 columns at larger
 * viewports you can easily do this just by passing in the breakpoints you need
 * into the relevant settings, like so:
 *
   // 2 cols
   $shell-grid-apply-2-col-width-at-breakpoints: true;
   $shell-grid-define-2-col-width-breakpoints: (1199 max);

   // 4 cols
   $shell-grid-apply-4-col-width-at-breakpoints: true;
   $shell-grid-define-4-col-width-breakpoints: (desk);
 *
 * This will to compile to:
 *
    @media (max-width: 74.9375em) {
        .l-grid__item--2-col-up-to-desk {
            width: 16.6666%;
        }
    }

    @media (min-width: 75em) {
        .l-grid__item--4-col-from-desk {
            width: 33.3333%%;
        }
    }
 *
 * Other styles cannot be applied to a grid item. Grid is a "Layout Module"
 * therefore the Single Responsibility Principle and the Open/Close Principle
 * strictly applies. So this would be invalid:
 *
    <div class="l-grid__item  c-card">
        […]
    </div>
 *
 * Here we have wrongly applied a "Component" (`c-card`) to the same element as
 * a "Layout Module", we've mixed concerns, this can result in this part of
 * the UI being prone to breakages. The valid way to approach this would be:
 *
    <div class="l-grid__item">
        <div class="c-card">
            […]
        </div>
    </div>
 *
 * As nicely put by Harry Roberts:
 *
 * "Grid systems grid should be thought of as shelves. They contain content but
 * are not content in themselves. You put up your shelves then fill them with
 * your stuff. By setting up our grids separately to our components you can
 * move components around a lot more easily than if they had dimensions
 * applied to them; this makes our front-ends a lot more adaptable and quick
 * to work with."
 *
 * N.B. they're are a number of Flexbox bugs captured here:
 * https://github.com/philipwalton/flexbugs, these have been accounted for in
 * the Shell grid however if anything is missed please refer to this resource.
 *
 * ----------------------------------------------------------------------------
 *
 * N.B. some of the Grid's modifiers and all of the Grid item widths are
 * available to be applied at any breakpoint the Shell consumer wishes, see
 * "Mixins and Functions -> Apply at breakpoints" to understand how this works.
 *
 * ----------------------------------------------------------------------------
 *
 * Grid is namespaced with "l" followed by one hyphen, like this:
 *
   l-grid
 *
 * The "l" stands for "layout" as Grid is a "Layout Module".
 *
 * ----------------------------------------------------------------------------
 *
 * @markup
    <div class="l-grid [modifier(s)]">
        <div class="l-grid__item l-grid__item--2-col">
            […]
        </div>
        <div class="l-grid__item l-grid__item--2-col">
            […]
        </div>
    </div>

    <div class="l-grid [modifier(s)]">
        <div class="l-grid__item l-grid__item--4-col">
            […]
        </div>
        <div class="l-grid__item l-grid__item--4-col">
            […]
        </div>
        <div class="l-grid__item l-grid__item--4-col">
            […]
        </div>
        <div class="l-grid__item l-grid__item--4-col">
            […]
        </div>
    </div>
 *
 * @credit
 * https://github.com/suitcss/components-grid
 */


/**
 * Grid container.
 *
 * 1. Negative left margin to negate the horizontal gutters.
 *
 * N.B. all grid gutter sizes are in "Settings -> Grid (Local)".
 */

.l-grid {
    display: flex;
    flex-flow: row wrap;
    margin-left: -(rem($shell-g-spacing)); // [1]
}


/**
 * Grid items.
 *
 * 1. Allows the use of widths.
 * 2. Horizontal gutter.
 *
 * N.B. all grid gutter sizes are in "Settings -> Grid (Local)".
 */

.l-grid__item {
    flex-basis: auto; // [1]
    padding-left: rem($shell-g-spacing); // [2]
}


/**
 * Modifier: all items match height of tallest item in a row.
 */

.l-grid--equal-height > .l-grid__item {
    display: flex;
}


/**
 * Modifier: gutterless for both horizontal and vertical gutters.
 *
 * N.B. we boost the specificity by chaining the base class to the modifier
 * class to make sure we're always overriding any gutter modifier classes.
 */

.l-grid.l-grid--gutterless {
    margin-left: 0;

    > .l-grid__item {
        padding-left: 0;
        margin-bottom: 0;
    }
}


/**
 * Modifiers: gutter sizes.
 *
 * N.B. all grid gutter sizes are in "Settings -> Grid (Local)".
 */

// Base
// N.B. having to reinstate the default so that any nested grids that inherit
// a "Gutterless" modifier can be easily reapplied
.l-grid--gutter-horizontal {
    margin-left: -(rem($shell-g-spacing));

    > .l-grid__item {
        padding-left:  rem($shell-g-spacing);
    }
}

// Decrease
.l-grid--gutter-horizontal-small {
    margin-left: -(rem($shell-g-spacing-small));

    > .l-grid__item {
        padding-left:  rem($shell-g-spacing-small);
    }
}

.l-grid--gutter-horizontal-x-small {
    margin-left: -(rem($shell-g-spacing-x-small));

    > .l-grid__item {
        padding-left:  rem($shell-g-spacing-x-small);
    }
}

// Increase
.l-grid--gutter-horizontal-large {
    margin-left: -(rem($shell-g-spacing-large));

    > .l-grid__item {
        padding-left:  rem($shell-g-spacing-large);
    }
}

.l-grid--gutter-horizontal-x-large {
    margin-left: -(rem($shell-g-spacing-x-large));

    > .l-grid__item {
        padding-left:  rem($shell-g-spacing-x-large);
    }
}


/**
 * Modifiers: vertical gutters.
 *
 * N.B. all grid gutter sizes are in "Settings -> Grid (Local)".
 */

// Base
.l-grid--gutter-vertical > .l-grid__item {
    margin-bottom: rem($shell-g-spacing);
}

// Decrease
.l-grid--gutter-vertical-small > .l-grid__item {
    margin-bottom: rem($shell-g-spacing-small);
}

.l-grid--gutter-vertical-x-small > .l-grid__item {
    margin-bottom: rem($shell-g-spacing-x-small);
}

// Increase
.l-grid--gutter-vertical-large > .l-grid__item {
    margin-bottom: rem($shell-g-spacing-large);
}

.l-grid--gutter-vertical-x-large > .l-grid__item {
    margin-bottom: rem($shell-g-spacing-x-large);
}


/**
 * Modifiers: alignments.
 */

// Middle
.l-grid--align-middle {
    align-items: center;
}

// Bottom
.l-grid--align-bottom {
    align-items: flex-end;
}

// Center
.l-grid--align-center {
    justify-content: center;
}

// Right
.l-grid--align-right {
    justify-content: flex-end;
}


/**
 * Modifiers: "space between" and "space around".
 */

// Space between
.l-grid--space-between {
    justify-content: space-between;
}

// Space around
.l-grid--space-around {
    justify-content: space-around;
}


/**
 * Modifier: fit, all grid items have an equal width.
 *
 * 1. Provide all values to avoid IE 10 bug with the shorthand `flex`
 *    property, see: http://git.io/vllC7.
 *    Use `0%` to avoid bug in IE 10/11 with unitless `flex-basis`, see:
 *    http://git.io/vllWx.
 */

.l-grid--fit .l-grid__item {
    flex: 1 1 0%;  // [1]
}


/**
 * Modifier: horizontally center an individual grid item.
 */

.l-grid__item--align-center {
    margin: 0 auto;
}


/**
 * Modifiers: grid column widths.
 *
 * N.B. grid column widths can be found in "Settings -> Grid (Local)".
 */

// 1 col
.l-grid__item--1-col {
    width: $shell-grid-1-col-width;
}

// Apply at breakpoints
@if $shell-grid-apply-1-col-width-at-breakpoints {
    @include apply-at-breakpoints(".l-grid__item--1-col", $shell-grid-define-1-col-width-breakpoints) {
        width: $shell-grid-1-col-width;
    }
}

// 2 col
.l-grid__item--2-col {
    width: $shell-grid-2-col-width;
}

// Apply at breakpoints
@if $shell-grid-apply-2-col-width-at-breakpoints {
    @include apply-at-breakpoints(".l-grid__item--2-col", $shell-grid-define-2-col-width-breakpoints) {
        width: $shell-grid-2-col-width;
    }
}

// 3 col
.l-grid__item--3-col {
    width: $shell-grid-3-col-width;
}

// Apply at breakpoints
@if $shell-grid-apply-3-col-width-at-breakpoints {
    @include apply-at-breakpoints(".l-grid__item--3-col", $shell-grid-define-3-col-width-breakpoints) {
        width: $shell-grid-3-col-width;
    }
}

// 4 col
.l-grid__item--4-col {
    width: $shell-grid-4-col-width;
}

// Apply at breakpoints
@if $shell-grid-apply-4-col-width-at-breakpoints {
    @include apply-at-breakpoints(".l-grid__item--4-col", $shell-grid-define-4-col-width-breakpoints) {
        width: $shell-grid-4-col-width;
    }
}

// 5 col
.l-grid__item--5-col {
    width: $shell-grid-5-col-width;
}

// Apply at breakpoints
@if $shell-grid-apply-5-col-width-at-breakpoints {
    @include apply-at-breakpoints(".l-grid__item--5-col", $shell-grid-define-5-col-width-breakpoints) {
        width: $shell-grid-5-col-width;
    }
}

// 6 col
.l-grid__item--6-col {
    width: $shell-grid-6-col-width;
}

// Apply at breakpoints
@if $shell-grid-apply-6-col-width-at-breakpoints {
    @include apply-at-breakpoints(".l-grid__item--6-col", $shell-grid-define-6-col-width-breakpoints) {
        width: $shell-grid-6-col-width;
    }
}

// 7 col
.l-grid__item--7-col {
    width: $shell-grid-7-col-width;
}

// Apply at breakpoints
@if $shell-grid-apply-7-col-width-at-breakpoints {
    @include apply-at-breakpoints(".l-grid__item--7-col", $shell-grid-define-7-col-width-breakpoints) {
        width: $shell-grid-7-col-width;
    }
}

// 8 col
.l-grid__item--8-col {
    width: $shell-grid-8-col-width;
}

// Apply at breakpoints
@if $shell-grid-apply-8-col-width-at-breakpoints {
    @include apply-at-breakpoints(".l-grid__item--8-col", $shell-grid-define-8-col-width-breakpoints) {
        width: $shell-grid-8-col-width;
    }
}

// 9 col
.l-grid__item--9-col {
    width: $shell-grid-9-col-width;
}

// Apply at breakpoints
@if $shell-grid-apply-9-col-width-at-breakpoints {
    @include apply-at-breakpoints(".l-grid__item--9-col", $shell-grid-define-9-col-width-breakpoints) {
        width: $shell-grid-9-col-width;
    }
}

// 10 col
.l-grid__item--10-col {
    width: $shell-grid-10-col-width;
}

// Apply at breakpoints
@if $shell-grid-apply-10-col-width-at-breakpoints {
    @include apply-at-breakpoints(".l-grid__item--10-col", $shell-grid-define-10-col-width-breakpoints) {
        width: $shell-grid-10-col-width;
    }
}

// 11 col
.l-grid__item--11-col {
    width: $shell-grid-11-col-width;
}

// Apply at breakpoints
@if $shell-grid-apply-11-col-width-at-breakpoints {
    @include apply-at-breakpoints(".l-grid__item--11-col", $shell-grid-define-11-col-width-breakpoints) {
        width: $shell-grid-11-col-width;
    }
}



/**
 * Side-by-side.
 */

/* ============================================================================
   SIDE-BY-SIDE
   ========================================================================= */

/**
 * Place any two elements side-by-side using Flexbox, typically for an image-
 * and text-like content. Like the "Grid" "Side-by-side" is a "Layout Module"
 * and a workhorse for your UI builds, any layout you need always look to the
 * "Side-by-side" "Layout Module"—including within your "Components", it exists
 * so you don't have to write redundant CSS to construct layouts.
 *
 * Other styles cannot be applied to any "Side-by-side" elements.
 * "Side-by-side" is a "Layout Module" therefore the Single Responsibility
 * Principle and the Open/Close Principle strictly applies. So this would be
 * invalid:
 *
    <div class="l-side-by-side__item  c-card">
        […]
    </div>
 *
 * Here we have wrongly applied a "Component" (`c-card`) to the same element as
 * a "Layout Module", we've mixed concerns, this can result in this part of
 * the UI being prone to breakages. The valid way to approach this would be:
 *
    <div class="l-side-by-side__item">
        <div class="c-card">
            […]
        </div>
    </div>
 *
 * ----------------------------------------------------------------------------
 *
 * "Side-by-side" is namespaced with "l" followed by one hyphen, like this:
 *
   l-side-by-side
 *
 * The "l" stands for "layout" as "Side-by-side" is a "Layout Module".
 *
 * ----------------------------------------------------------------------------
 *
 * @markup
    <div class="l-side-by-side [modifier(s)]">
        <div class="l-side-by-side__item">
            […]
        </div>
        <div class="l-side-by-side__item">
            […]
        </div>
    </div>
 */


/**
 * The container.
 */

.l-side-by-side {
    display: flex;
}


/**
 * Each item, they're only ever two items in a container.
 *
 * N.B. all grid gutter sizes are in "Settings -> Grid (Local)".
 *
 * 1. Provide all values to avoid IE 10 bug with the shorthand `flex`
 *    property: http://git.io/vllC7.
      Use `0%` to avoid bug in IE 10/11 with unitless `flex-basis`:
      http://git.io/vllWx.
 * 2. Apply a gutter.
 */

// The last item
.l-side-by-side__item:last-child {
    flex: 1 1 0%; // [1]
    margin-left: rem($shell-g-spacing); // [2]
}

// Reversing the gutters for the "Reversed" modifier
.l-side-by-side--reversed > .l-side-by-side__item:last-child {
    margin-left: 0;
    margin-right: rem($shell-g-spacing);
}


/**
 * Modifier: gutterless.
 *
 * N.B. includes reversing the gutters for the "Reversed" modifier.
 */

.l-side-by-side--gutterless > .l-side-by-side__item:last-child {
    margin-left: 0;
}

.l-side-by-side--gutterless.l-side-by-side--reversed > .l-side-by-side__item:last-child {
    margin-left: 0;
    margin-right: 0;
}


/**
 * Modifiers: gutter sizes.
 *
 * N.B. includes reversing the gutters for the "Reversed" modifier.
 * N.B. all grid gutter sizes are in "Settings -> Grid (Local)".
 */

// Base
// N.B. having to reinstate the default so that any nested "Side-by-side's"
// that inherit a "Gutterless" modifier can be easily reapplied
.l-side-by-side--gutter > .l-side-by-side__item:last-child {
    margin-left: rem($shell-g-spacing);
}

.l-side-by-side--gutter.l-side-by-side--reversed > .l-side-by-side__item:last-child {
    margin-left: 0;
    margin-right: rem($shell-g-spacing);
}

// Decrease
.l-side-by-side--gutter-small > .l-side-by-side__item:last-child {
    margin-left: rem($shell-g-spacing-small);
}

.l-side-by-side--gutter-small.l-side-by-side--reversed > .l-side-by-side__item:last-child {
    margin-left: 0;
    margin-right: rem($shell-g-spacing-small);
}

.l-side-by-side--gutter-x-small > .l-side-by-side__item:last-child {
    margin-left: rem($shell-g-spacing-x-small);
}

.l-side-by-side--gutter-x-small.l-side-by-side--reversed > .l-side-by-side__item:last-child {
    margin-left: 0;
    margin-right: rem($shell-g-spacing-x-small);
}

// Increase
.l-side-by-side--gutter-large > .l-side-by-side__item:last-child {
    margin-left: rem($shell-g-spacing-large);
}

.l-side-by-side--gutter-large.l-side-by-side--reversed > .l-side-by-side__item:last-child {
    margin-left: 0;
    margin-right: rem($shell-g-spacing-large);
}

.l-side-by-side--gutter-x-large > .l-side-by-side__item:last-child {
    margin-left: rem($shell-g-spacing-x-large);
}

.l-side-by-side--gutter-x-large.l-side-by-side--reversed > .l-side-by-side__item:last-child {
    margin-left: 0;
    margin-right: rem($shell-g-spacing-x-large);
}


/**
 * Modifiers: vertical alignments.
 */

// Middle
.l-side-by-side--align-middle .l-side-by-side__item {
    align-self: center;
}

// Bottom
.l-side-by-side--align-bottom .l-side-by-side__item {
    align-self: flex-end;
}


/**
 * Modifier: reversed.
 */

.l-side-by-side--reversed {
    flex-direction: row-reverse;
}



/**
 * Helpers.
 */

/* ============================================================================
   HELPERS
   ========================================================================= */


/**
 * The purpose of Helpers is to provide extremely common style treatments
 * and UI patterns, some good examples are:
 *
 * - Hide an element visually but have it available for screen readers
 * - Truncate a line of text using an ellipsis
 * - Applying white space outside of Components
 *
 * Rather than repeating the CSS for these common style treatments and UI
 * patterns over and over and also the cognitive load of having to remember
 * their CSS declarations we instead abstract them into nicely reusable
 * classes and mixins.
 *
 * Helpers all follow the Single Responsibility Principle and the Open/Closed
 * Principle meaning they do one thing and one thing only and are never open to
 * extension i.e. you cannot modify or add to them in any way. If you need to
 * modify any of Shell's Helpers then you should simply not use them. Read more
 * about these principles and how they apply to CSS here:
 *
 * - http://csswizardry.com/2012/04/the-single-responsibility-principle-applied-to-css/
 * - http://csswizardry.com/2012/06/the-open-closed-principle-applied-to-css/
 *
 * Implementation
 *
 * Helpers are available as classes and sometimes as mixins, here we explain
 * how to implement the two different types. The class versions come with the
 * `!important` keyword, this is because they always need to win in terms of
 * CSS specificity as they should always just work. For the mixin versions
 * this is optional as the mixin versions are typically being applied from
 * within Components therefore do not require the specificity boost. All the
 * mixin versions are defined in "Mixins and Functions -> Helpers".
 *
 * Applying Helpers via their *class* implementation would only be done in two
 * scenarios:
 *
 * - **Outside of Components and Layout Templates:** this'll be rare as most
 *   of your UI should be componentised or encapsulated in a Layout Template,
 *   for example, a site header or footer. An example though, might be that
 *   you have a paragraph element (`<p>`) sitting between two Components in a
 *   view that needs to be center aligned, so you apply one of the "Text"
 *   Helper classes: `.h-text-align-center`, like so:
 *   `<p class="h-text-align-center">`. However, this could be argued that
 *   this paragraph element should become a Component. The main exception of
 *   avoiding Helpers outside of Components and Layout Templates is the
 *   "Spacing" Helpers as we don't want to bake in outside (`margin`) spacing
 *   to Components as this makes them contextual to surrounding UI.
 *
 * - **Inside of Components and Layout Templates:** although quite rare there
 *   are certain scenarios were you would want to be applying a Helper
 *   directly in the markup of a Component or Layout Template as opposed to
 *   applying it via the mixin implementation. However, this typically only
 *   ever applies to multi-line declaration Helpers, applying a single-line
 *   declaration Helper, for example:
 *
    .h-text-size {
        font-size: rem($shell-g-font-size) !important;
    }
 *
 *   Wouldn't be correct as you would simply write that single-line declaration
 *   directly into your Component or Layout Template CSS, and this is why
 *   single-line declaration Helpers do not come with a mixin version. An
 *   example of applying a multi-line declaration Helper directly in the
 *   markup of a Component or Layout Template would be when you're having to
 *   create a class to apply a fairly common Helper. For example, you're
 *   inside a "Drop Down Menu" Component needing to add a piece of text to the
 *   drop down menu trigger button that is only for screen reader users—using
 *   the "Hide visually" Helper. The correct way to achieve this would be:
 *
    <button type="button" class="c-drop-down-menu__trigger">
        My account
        <span class="h-hide-visually">Open the menu with the enter key and close it with the escape key; use the up and down arrow keys to navigate.</span>
    </button>
 *
 *   Not:
 *
    <button type="button" class="c-drop-down-menu__trigger">
        My account
        <span class="c-drop-down-menu__trigger-assistive-text">Open the menu
        with the enter key and close it with the escape key; use the up and
        down arrow keys to navigate.</span>
    </button>
    .c-drop-down-menu__trigger-assistive-text {
        @include h-hide-visually;
    }
 *
 *   Knowing when to do this isn't always clear and it is very case dependant.
 *
 * Applying Helpers via their *mixin* implementation would only be done in one
 * scenario:
 *
 * - **Inside of Components and Layout Templates:** any multi-line declaration
 *   Helpers should be applied via their mixin, this is to keep all the styles
 *   related to a Component or Layout Template nicely contained. For example,
 *   you may need to truncate a line of text in a site header Layout Template
 *   that is part of a main nav link item—using the "Text truncate" Helper.
 *   The correct way to achieve this would be:
 *
    <a href="some/url" class="l-header__nav-item">List &amp; Subscribers</a>
 *
    .l-header__nav-item {
        […]
        @include h-text-truncate;
    }
 *
 *   Not:
 *
    <a href="some/url" class="l-header__nav-item  h-text-truncate">List &amp; Subscribers</a>
 *
 * ----------------------------------------------------------------------------
 *
 * N.B. it is important not to overuse certain Helpers, the exceptions are the
 * "Spacing" Helpers and the "Hide visually" and "Text truncate" Helpers.
 * Overuse can indicate that your UI is not componentised enough, which can
 * lead to a number of problems.
 *
 * ----------------------------------------------------------------------------
 *
 * N.B. some Helpers are available to be applied at any breakpoint the Shell
 * consumer wishes, see "Mixins and Functions -> Apply at breakpoints" to
 * understand how this works.
 *
 * ----------------------------------------------------------------------------
 *
 * Helpers are namespaced with "h" followed by one hyphen, like this:
 *
   h-clear-fix
   h-text-truncate
 *
 * The "h" stands for "helper".
 *
 * ----------------------------------------------------------------------------
 *
 * CONTENTS:
 *
 * 1. Clear fix
 * 2. Text
 * 3. Hide
 * 4. Spacing
 * 5. Horizontal and vertical alignment
 * 6. Intrinsic ratio
 */




/* 1. Clear fix
   ========================================================================= */

/**
 * Makes an element expand to contain floated children.
 *
 * N.B. mixin is here: "Mixins and Functions -> Helpers".
 */

.h-clear-fix {
    @include clear-fix(true);
}




/* 2. Text
   ========================================================================= */

/**
 * Sizes.
 */

/**
 * Base.
 */

.h-text-size {
    font-size: rem($shell-g-font-size) !important;
}

// Apply at breakpoints
@if $shell-helper-apply-text-size-at-breakpoints {
    @include apply-at-breakpoints(".h-text-size", $shell-helper-define-text-size-breakpoints) {
        font-size: rem($shell-g-font-size) !important;
    }
}

/**
 * Decrease from base.
 */

// Small
.h-text-size-small {
    font-size: rem($shell-g-font-size-small) !important;
}

// Apply at breakpoints
@if $shell-helper-apply-text-size-small-at-breakpoints {
    @include apply-at-breakpoints(".h-text-size-small", $shell-helper-define-text-size-small-breakpoints) {
        font-size: rem($shell-g-font-size-small) !important;
    }
}

// X-small
.h-text-size-x-small {
    font-size: rem($shell-g-font-size-x-small) !important;
}

// Apply at breakpoints
@if $shell-helper-apply-text-size-x-small-at-breakpoints {
    @include apply-at-breakpoints(".h-text-size-x-small", $shell-helper-define-text-size-x-small-breakpoints) {
        font-size: rem($shell-g-font-size-x-small) !important;
    }
}

// 2X-small
.h-text-size-2x-small {
    font-size: rem($shell-g-font-size-2x-small) !important;
}

// Apply at breakpoints
@if $shell-helper-apply-text-size-x-small-at-breakpoints {
    @include apply-at-breakpoints(".h-text-size-2x-small", $shell-helper-define-text-size-2x-small-breakpoints) {
        font-size: rem($shell-g-font-size-2x-small) !important;
    }
}

/**
 * Increase from base.
 */

// Large
.h-text-size-large {
    font-size: rem($shell-g-font-size-large) !important;
}

// Apply at breakpoints
@if $shell-helper-apply-text-size-large-at-breakpoints {
    @include apply-at-breakpoints('.h-text-size-large', $shell-helper-define-text-size-large-breakpoints) {
        font-size: rem($shell-g-font-size-large) !important;
    }
}

// X-Large
.h-text-size-x-large {
    font-size: rem($shell-g-font-size-x-large) !important;
}

// Apply at breakpoints
@if $shell-helper-apply-text-size-x-large-at-breakpoints {
    @include apply-at-breakpoints('.h-text-size-x-large', $shell-helper-define-text-size-x-large-breakpoints) {
        font-size: rem($shell-g-font-size-x-large) !important;
    }
}

// 2X-Large
.h-text-size-2x-large {
    font-size: rem($shell-g-font-size-2x-large) !important;
}

// Apply at breakpoints
@if $shell-helper-apply-text-size-2x-large-at-breakpoints {
    @include apply-at-breakpoints('.h-text-size-2x-large', $shell-helper-define-text-size-2x-large-breakpoints) {
        font-size: rem($shell-g-font-size-2x-large) !important;
    }
}

// 3X-Large
.h-text-size-3x-large {
    font-size: rem($shell-g-font-size-3x-large) !important;
}

// Apply at breakpoints
@if $shell-helper-apply-text-size-3x-large-at-breakpoints {
    @include apply-at-breakpoints('.h-text-size-3x-large', $shell-helper-define-text-size-3x-large-breakpoints) {
        font-size: rem($shell-g-font-size-3x-large) !important;
    }
}

// 4X-Large
.h-text-size-4x-large {
    font-size: rem($shell-g-font-size-4x-large) !important;
}

// Apply at breakpoints
@if $shell-helper-apply-text-size-4x-large-at-breakpoints {
    @include apply-at-breakpoints('.h-text-size-4x-large', $shell-helper-define-text-size-4x-large-breakpoints) {
        font-size: rem($shell-g-font-size-4x-large) !important;
    }
}

// 5X-Large
.h-text-size-5x-large {
    font-size: rem($shell-g-font-size-5x-large) !important;
}

// Apply at breakpoints
@if $shell-helper-apply-text-size-5x-large-at-breakpoints {
    @include apply-at-breakpoints('.h-text-size-5x-large', $shell-helper-define-text-size-5x-large-breakpoints) {
        font-size: rem($shell-g-font-size-5x-large) !important;
    }
}

// 6X-Large
.h-text-size-6x-large {
    font-size: rem($shell-g-font-size-6x-large) !important;
}

// Apply at breakpoints
@if $shell-helper-apply-text-size-6x-large-at-breakpoints {
    @include apply-at-breakpoints('.h-text-size-6x-large', $shell-helper-define-text-size-6x-large-breakpoints) {
        font-size: rem($shell-g-font-size-6x-large) !important;
    }
}

// 7X-Large
.h-text-size-7x-large {
    font-size: rem($shell-g-font-size-7x-large) !important;
}

// Apply at breakpoints
@if $shell-helper-apply-text-size-7x-large-at-breakpoints {
    @include apply-at-breakpoints('.h-text-size-7x-large', $shell-helper-define-text-size-7x-large-breakpoints) {
        font-size: rem($shell-g-font-size-7x-large) !important;
    }
}


/**
 * Alignments.
 */

// Center
.h-text-align-center {
    text-align: center !important;
}

// Apply at breakpoints
@if $shell-helper-apply-text-align-center-at-breakpoints {
    @include apply-at-breakpoints('.h-text-align-center', $shell-helper-define-text-align-center-breakpoints) {
        text-align: center !important;
    }
}

// Left
.h-text-align-left {
    text-align: left !important;
}

// Apply at breakpoints
@if $shell-helper-apply-text-align-left-at-breakpoints {
    @include apply-at-breakpoints('.h-text-align-left', $shell-helper-define-text-align-left-breakpoints) {
        text-align: left !important;
    }
}

// Right
.h-text-align-right {
    text-align: right !important;
}

// Apply at breakpoints
@if $shell-helper-apply-text-align-right-at-breakpoints {
    @include apply-at-breakpoints('.h-text-align-right', $shell-helper-define-text-align-right-breakpoints) {
        text-align: right !important;
    }
}


/**
 * Truncate some text using an ellipsis. This Helper will only work on block
 * container elements so the default is set to `display: block;`, to override
 * this to be, say, `display: inline-block;` you have two options:
 *
 * 1. Use the "Inline" modifier class selector: `.h-text-truncate--inline`.
 * 2. Use the mixin assigning "inline-block" to the `$display` parameter:
 *    `@include h-text-truncate(inline-block);`.
 *
 * You can assign other `display` values when using the mixin but not sure if
 * that'll ever be required outside of `display: block;` and
 * `display: inline-block;`?
 *
 * N.B. mixin is here: "Mixins and Functions -> Helpers".
 */

.h-text-truncate {
    @include text-truncate(true);
}

// Apply at breakpoints
@if $shell-helper-apply-text-truncate-at-breakpoints {
    @include apply-at-breakpoints('.h-text-truncate', $shell-helper-define-text-truncate-breakpoints) {
        @include text-truncate(true);
    }
}

/**
 * Modifier: inline.
 */

.h-text-truncate--inline {
    display: inline-block !important;
}

// Apply at breakpoints
@if $shell-helper-apply-text-truncate-at-breakpoints {
    @include apply-at-breakpoints('.h-text-truncate--inline', $shell-helper-define-text-truncate-breakpoints) {
        display: inline-block !important;
    }
}




/* 3. Hide
   ========================================================================= */

/**
 * Hide elements from both screen readers and the document flow.
 */

.h-hide {
    display: none !important;
}

// Apply at breakpoints
@if $shell-helper-apply-hide-at-breakpoints {
    @include apply-at-breakpoints('.h-hide', $shell-helper-define-hide-breakpoints) {
        display: none !important;
    }
}


/**
 * Hide elements for JavaScript users and non-JavaScript users, this is
 * necessary when building accessible and progressively enhanced UI's. This
 * will require functionality that can append a hook to an element
 * (typically the `html` element) if JavaScript is on.
 */

.js .h-hide-if-js-is-on {
    display: none !important;
}

.no-js .h-hide-if-js-is-off {
    display: none !important;
}


/**
 * Hide elements only visually but have it available for screen readers.
 *
 * N.B. mixin is here: "Mixins and Functions -> Helpers".
 */

.h-hide-visually {
    @include hide-visually(true);
}

// Apply at breakpoints
@if $shell-helper-apply-hide-visually-at-breakpoints {
    @include apply-at-breakpoints('.h-hide-visually', $shell-helper-define-hide-visually-breakpoints) {
        @include hide-visually(true);
    }
}


/**
 * Hide elements for JavaScript users and non-JavaScript users, this is
 * necessary when building accessible and progressively enhanced UI's.
 *
 * These classes are applied to the `<html>` element depending whether
 * JavaScript is on or off:
 *
 * - `no-js` = JavaScript is off
 * - `js`    = JavaScript is on
 *
 * The `no-js` class is to be hard-coded to the `<html>` element in your master
 * layout to be replaced with the `js` class using JavaScript.
 *
 * N.B. these single-line declaration Helpers would typically always be applied
 * directly in the markup of your Components and Layout Templates.
 */

// JavaScript is off
.no-js .h-hide-if-js-off {
    display: none !important;
}

// JavaScript is on
.js .h-hide-if-js-on {
    display: none !important;
}


/**
 * Hide and show elements for print media.
 */

.h-show-for-print,
.h-show-for-print-inline,
.h-show-for-print-inline-block {
    display: none !important;
}

@media print {

    .h-hide-for-print {
        display: none !important;
    }

    .h-show-for-print {
        display: block !important;
    }

    .h-show-for-print-inline {
        display: inline !important;
    }

    .h-show-for-print-inline-block {
        display: inline-block !important;
    }
}




/* 4. Spacing
   ========================================================================= */

/**
 * Any spacing outside of a Component is handled by one of these "Spacing"
 * Helpers unless handled by the "Grid", and ALL spacing is downward facing
 * hence only `margin-bottom` being used.
 */

/**
 * Base.
 */

.h-spacing {
    margin-bottom: rem($shell-g-spacing) !important;
}

// Apply at breakpoints
@if $shell-helper-apply-spacing-at-breakpoints {
    @include apply-at-breakpoints('.h-spacing', $shell-helper-define-spacing-breakpoints) {
        margin-bottom: rem($shell-g-spacing) !important;
    }
}

/**
 * Decrease from base.
 */

// Small
.h-spacing-small {
    margin-bottom: rem($shell-g-spacing-small) !important;
}

// Apply at breakpoints
@if $shell-helper-apply-spacing-small-at-breakpoints {
    @include apply-at-breakpoints('.h-spacing-small', $shell-helper-define-spacing-small-breakpoints) {
        margin-bottom: rem($shell-g-spacing-small) !important;
    }
}

// X-Small
.h-spacing-x-small {
    margin-bottom: rem($shell-g-spacing-x-small) !important;
}

// Apply at breakpoints
@if $shell-helper-apply-spacing-x-small-at-breakpoints {
    @include apply-at-breakpoints('.h-spacing-x-small', $shell-helper-define-spacing-x-small-breakpoints) {
        margin-bottom: rem($shell-g-spacing-x-small) !important;
    }
}

/**
 * Increase from base.
 */

// Large
.h-spacing-large {
    margin-bottom: rem($shell-g-spacing-large) !important;
}

// Apply at breakpoints
@if $shell-helper-apply-spacing-large-at-breakpoints {
    @include apply-at-breakpoints('.h-spacing-large', $shell-helper-define-spacing-large-breakpoints) {
        margin-bottom: rem($shell-g-spacing-large) !important;
    }
}

// X-Large
.h-spacing-x-large {
    margin-bottom: rem($shell-g-spacing-x-large) !important;
}

// Apply at breakpoints
@if $shell-helper-apply-spacing-x-large-at-breakpoints {
    @include apply-at-breakpoints('.h-spacing-x-large', $shell-helper-define-spacing-x-large-breakpoints) {
        margin-bottom: rem($shell-g-spacing-x-large) !important;
    }
}

// 2X-Large
.h-spacing-2x-large {
    margin-bottom: rem($shell-g-spacing-2x-large) !important;
}

// Apply at breakpoints
@if $shell-helper-apply-spacing-2x-large-at-breakpoints {
    @include apply-at-breakpoints('.h-spacing-2x-large', $shell-helper-define-spacing-2x-large-breakpoints) {
        margin-bottom: rem($shell-g-spacing-2x-large) !important;
    }
}

// 3X-Large
.h-spacing-3x-large {
    margin-bottom: rem($shell-g-spacing-3x-large) !important;
}

// Apply at breakpoints
@if $shell-helper-apply-spacing-3x-large-at-breakpoints {
    @include apply-at-breakpoints('.h-spacing-3x-large', $shell-helper-define-spacing-3x-large-breakpoints) {
        margin-bottom: rem($shell-g-spacing-3x-large) !important;
    }
}

// 4X-Large
.h-spacing-4x-large {
    margin-bottom: rem($shell-g-spacing-4x-large) !important;
}

// Apply at breakpoints
@if $shell-helper-apply-spacing-4x-large-at-breakpoints {
    @include apply-at-breakpoints('.h-spacing-4x-large', $shell-helper-define-spacing-4x-large-breakpoints) {
        margin-bottom: rem($shell-g-spacing-4x-large) !important;
    }
}

// 5X-Large
.h-spacing-5x-large {
    margin-bottom: rem($shell-g-spacing-5x-large) !important;
}

// Apply at breakpoints
@if $shell-helper-apply-spacing-5x-large-at-breakpoints {
    @include apply-at-breakpoints('.h-spacing-5x-large', $shell-helper-define-spacing-5x-large-breakpoints) {
        margin-bottom: rem($shell-g-spacing-5x-large) !important;
    }
}




/* 5. Horizontal and vertical alignment
   ========================================================================= */

/**
 * Flexbox version, must go on the parent of the element that needs the
 * alignment.
 *
 * N.B. mixin is here: "Mixins and Functions -> Helpers".
 */

.h-align-horizontally-and-vertically {
    @include align-horizontally-and-vertically(true);
}


/**
 * Position and transform version, must go on the element that needs the
 * alignment and the elements parent must have `position: relative;`.
 *
 * N.B. mixin is here: "Mixins and Functions -> Helpers".
 */

.h-align-horizontally-and-vertically-parent {
    position: relative !important;
}

.h-align-horizontally-and-vertically-alt {
    @include align-horizontally-and-vertically-alt(true);
}




/* 6. Intrinsic ratio
   ========================================================================= */

/**
 * A container that retains the aspect ratio of its content when that content
 * needs to adapt to the width of varying viewports. The content would
 * typically be embedded elements, like:
 *
 * `<video>`
 * `<iframe>`
 *
 * N.B. mixin is here: "Mixins and Functions -> Helpers".
 *
 * @credit
 * https://github.com/suitcss/components-flex-embed/blob/master/lib/flex-embed.css
 */


/**
 * The container, the default ratio is "16:9".
 */

.h-intrinsic-ratio {
    @include intrinsic-ratio-container(true);
}

/**
 * Modifiers: different ratios, we can't use the mixin for this as it'll
 * generate too much CSS as we'll be generating every property for each
 * modifier when we only need to set the `padding-bottom` property—so we just
 * override the default ratio of "16:9".
 */

// 3:1 aspect ratio
.h-intrinsic-ratio--3-by-1 {
    padding-bottom: (100 / 3) * 1% !important;
}

// 2:1 aspect ratio
.h-intrinsic-ratio--2-by-1 {
    padding-bottom: 50% !important;
}

// 4:3 aspect ratio
.h-intrinsic-ratio--4-by-3 {
    padding-bottom: 75% !important;
}

// 1:1 aspect ratio
.h-intrinsic-ratio--1-by-1 {
    padding-bottom: 100% !important;
}


/**
 * The content.
 */

.h-intrinsic-ratio__content {
    @include intrinsic-ratio-content(true);
}


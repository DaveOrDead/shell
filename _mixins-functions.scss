/* ============================================================================
   @MIXINS AND FUNCTIONS
   ========================================================================= */


/**
 * All of Shell’s mixins and functions.
 *
 * All mixins and functions use the following annotations from the Sass Docs
 * documentation system:
 *
 * @access
 * @example
 * @parameter
 * @require
 * @throw
 *
 * See: http://sassdoc.com/annotations/
 *
 * ----------------------------------------------------------------------------
 *
 * CONTENTS:
 *
 * 1. Shell-only mixins and functions
 * 2. HiDPI background images (Mixin)
 * 3. Convert pixels to `rem`s or `em`s (Function)
 */



// This placeholder will be replaced with the breakpoint name
$mixin-breakpoint-name-placeholder: "{bp}";

@mixin generate-at-breakpoints($class, $breakpoint-names: ()) {

  $all-breakpoint-names: map-keys($breakpoints);

  @if $breakpoint-names == all {
    $breakpoint-names: $all-breakpoint-names;
  }

  // When specifying one breakpoint with an explicit limit, it needs to be
  // casted into a list of lists, otherwise the mixin assumes there is a
  // breakpoint called 'max'
  @if length($breakpoint-names) == 2 and index((min max),
    nth($breakpoint-names, 2)) {
    $breakpoint-names-copy: $breakpoint-names;
    $breakpoint-names: ();
    $breakpoint-names: append($breakpoint-names, (nth($breakpoint-names-copy, 1)
     nth($breakpoint-names-copy, 2)));
  }

  @each $breakpoint-name in $breakpoint-names {

    $limit: "min";
    $joiner: "from";

    @if type-of($breakpoint-name) == list {
      $limit: nth($breakpoint-name, 2);
      $breakpoint-name: nth($breakpoint-name, 1);
    }
    @else {
      // Palm is a special case where it uses a `max-width` media query
      $limit: if($breakpoint-name == "palm", "max", "min");
    }

    @if $limit == max {
      $joiner: "up-to";
    }

    @include respond-to($breakpoint-name, $limit) {
      $final-selector: "#{$class}-#{$joiner}-#{$breakpoint-name}";

      // Handle complex selectors by replacing a placeholder with the
      // breakpoint suffix
      @if str_index($class, $mixin-breakpoint-name-placeholder) != null {
        $final-selector: str-replace($class, $mixin-breakpoint-name-placeholder,
         "-#{$joiner}-#{$breakpoint-name}");
      }

      // Output a class which applies the style at a given breakpoint
      #{$final-selector} {
        @content;
      }
    }
  }
}




/* 1. Shell-only mixins and functions
   ========================================================================= */

/**
 * Shell-only mixins and functions, not for Shell consumers although some can
 * be used if the need arises.
 */


/**
 * Remove the unit of a length.
 *
 * @access private
 *
 * @param {number} $number — Number to remove unit from
 *
 * @example
   strip-unit(24px)
 */

@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }

    @return $number;
}




/* 2. HiDPI background images (Mixin)
   ========================================================================= */

/**
 * A mixin for easily applying HiDPI background images.
 *
 * We use a device pixel ratio (“dpr”) of “1.3” which captures almost all HiDPI
 * aware devices, see: https://gist.github.com/marcedwards/3446599.
 *
 * N.B. Autoprefixer will take care of generating the non-standard
 * `-webkit-device-pixel-ratio` for browsers/devices that need it, see:
 * http://caniuse.com/#feat=css-media-resolution.
 *
 * @access public
 *
 * @param {string} $img-url — The image url path
 * @param {number} $img-width [auto] — The image width in `px`
 * @param {number} $img-height [auto] — The image height in `px`
 *
 * @exception
 * $img-url must be within single or double quotes
 * $img-width and $img-height must be a number with a unit
 *
 * @example
   .selector {
      background: url("path/to/image/image.png") no-repeat;
      @include hidpi-bg-img("path/to/image/image.png", 100px, 45px);
    }

    .selector {
      background: url("path/to/image/image.png") no-repeat;
      @include hidpi-bg-img("path/to/image/image.png", 32px);
    }
 */

@mixin hidpi-bg-img($img-url, $img-width: auto, $img-height: auto) {
    @media (min-resolution: $shell-g-hidpi-dppx),
           (min-resolution: $shell-g-hidpi-dpi) {
        background-image: url($img-url);
        background-size: $img-width $img-height;
    }
}




/* 3. Convert pixels to `rem`s or `em`s (Function)
   ========================================================================= */

/**
 * A simple function to convert pixels to `rem`s or `em`s.
 *
 * @access public
 *
 * @param {number} $value — The `px` amount to be converted
 * @param {number} $parent-value [$shell-g-font-size] — The `px` amount of the
 * parent (`em` only)
 *
 * @requires
 * function strip-unit()
 *
 * @exception
 * $value must be a number
 * $parent-value must be a number
 *
 * @example
   .selector {
     margin-left: to-em(8, 20);
   }

   .selector {
     padding: to-rem(8) 0;
   }
 */


/**
 * `em`.
 */

@function to-em($value, $parent-value: $shell-g-font-size) {
    @if type-of($value) == 'string' {
        @error 'You have to enter a number, you entered "#{$value}".';
    }
    @if type-of($parent-value) == 'string' {
        @error 'You have to enter a number, you entered "#{$parent-value}".';
    }

    @return strip-unit($value) / strip-unit($parent-value) * 1em;
}


/**
 * `rem`.
 */

@function to-rem($value) {
    @if type-of($value) == 'string' {
        @error 'You have to enter a number, you entered "#{$value}".';
    }

    @return strip-unit($value) / strip-unit($shell-g-font-size) * 1rem;
}
